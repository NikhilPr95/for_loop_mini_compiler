('ASSIGN', [['identifier', '=', 'EXPRESSION', ';']])
('ASSIGN_ST', [['ASSIGN', 'ST'], ['ASSIGN']])
('COND', [['EXPRESSION', 'relational_operator', 'EXPRESSION', ';']])
('DECL', [['type', 'identifier', ';']])
('DECL_ST', [['DECL', 'ST'], ['DECL']])
('E', [['T', "E'"], ['T']])
("E'", [['+', 'T', "E'"], ['-', 'T', "E'"]])
('EXPRESSION', [['E']])
('F', [['G', '^', 'F'], ['G']])
('FOR_LOOP', [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']])
('FOR_LOOP_ST', [['FOR_LOOP', 'ST'], ['FOR_LOOP']])
('G', [['(', 'E', ')'], ['identifier'], ['number']])
('IF_COND', [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']])
('IF_COND_ST', [['IF_COND', 'ST'], ['IF_COND']])
('INCREMENT', [['I_ASSIGN'], ['I_COND'], ['EXPRESSION']])
('I_ASSIGN', [['identifier', '=', 'EXPRESSION']])
('OP_ELSE', [['else', '{', 'STATEMENT', '}']])
('PROG', [['STATEMENT', 'eof']])
('ST', [['STATEMENT_ST']])
('STATEMENT', [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']])
('STATEMENT_ST', [['STATEMENT', ';', 'ST'], ['STATEMENT']])
('T', [['F', "T'"], ['F']])
("T'", [['*', 'F', "T'"], ['/', 'F', "T'"]])


[('int', 'type'), ('i', 'identifier'), (';', 'punctuation')]




STACK  ['(((', 'PROG']
in match rule with  PROG : [['STATEMENT', 'eof']]
in rule  ['STATEMENT', 'eof']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof']]
in symbol STATEMENT 		(in rule  ['STATEMENT', 'eof'] )
in producer
in match rule with  STATEMENT : [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['FOR_LOOP_ST']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['FOR_LOOP_ST']]
in symbol FOR_LOOP_ST 		(in rule  ['FOR_LOOP_ST'] )
in producer
in match rule with  FOR_LOOP_ST : [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
in rule  ['FOR_LOOP', 'ST']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['FOR_LOOP_ST'], '(((', ['FOR_LOOP', 'ST']]
in symbol FOR_LOOP 		(in rule  ['FOR_LOOP', 'ST'] )
in producer
in match rule with  FOR_LOOP : [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['FOR_LOOP_ST'], '(((', ['FOR_LOOP', 'ST'], '(((', ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in symbol for 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else int for
5. unmatched for int
Popped  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']
Popped  (((  with rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['FOR_LOOP_ST'], '(((', ['FOR_LOOP', 'ST']]
returned false  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
2. unmatched FOR_LOOP int int ['FOR_LOOP', 'ST']
Popped  ['FOR_LOOP', 'ST']  with rule  ['FOR_LOOP', 'ST']
Popped  (((  with rule  ['FOR_LOOP', 'ST']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['FOR_LOOP_ST']]
returned false  ['FOR_LOOP', 'ST'] [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
in rule  ['FOR_LOOP']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['FOR_LOOP_ST'], '(((', ['FOR_LOOP']]
in symbol FOR_LOOP 		(in rule  ['FOR_LOOP'] )
in producer
in match rule with  FOR_LOOP : [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['FOR_LOOP_ST'], '(((', ['FOR_LOOP'], '(((', ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in symbol for 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else int for
5. unmatched for int
Popped  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']
Popped  (((  with rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['FOR_LOOP_ST'], '(((', ['FOR_LOOP']]
returned false  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
2. unmatched FOR_LOOP int int ['FOR_LOOP']
Popped  ['FOR_LOOP']  with rule  ['FOR_LOOP']
Popped  (((  with rule  ['FOR_LOOP']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['FOR_LOOP_ST']]
returned false  ['FOR_LOOP'] [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
2. unmatched FOR_LOOP_ST int int ['FOR_LOOP_ST']
Popped  ['FOR_LOOP_ST']  with rule  ['FOR_LOOP_ST']
Popped  (((  with rule  ['FOR_LOOP_ST']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof']]
returned false  ['FOR_LOOP_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['IF_COND_ST']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST']]
in symbol IF_COND_ST 		(in rule  ['IF_COND_ST'] )
in producer
in match rule with  IF_COND_ST : [['IF_COND', 'ST'], ['IF_COND']]
in rule  ['IF_COND', 'ST']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST']]
in symbol IF_COND 		(in rule  ['IF_COND', 'ST'] )
in producer
in match rule with  IF_COND : [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']]
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] )
else int if
5. unmatched if int
Popped  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']
Popped  (((  with rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST']]
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']]
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] )
else int if
5. unmatched if int
Popped  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']
Popped  (((  with rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST']]
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in symbol EXPRESSION 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E']]
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"]]
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"]]
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else int (
5. unmatched ( int
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token int type identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token int type number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G int int ['G', '^', 'F']
Popped  ['G', '^', 'F']  with rule  ['G', '^', 'F']
Popped  (((  with rule  ['G', '^', 'F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"]]
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G']]
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else int (
5. unmatched ( int
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token int type identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token int type number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G int int ['G']
Popped  ['G']  with rule  ['G']
Popped  (((  with rule  ['G']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"]]
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F int int ['F', "T'"]
Popped  ['F', "T'"]  with rule  ['F', "T'"]
Popped  (((  with rule  ['F', "T'"]
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"]]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F']]
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F']]
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else int (
5. unmatched ( int
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token int type identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token int type number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G int int ['G', '^', 'F']
Popped  ['G', '^', 'F']  with rule  ['G', '^', 'F']
Popped  (((  with rule  ['G', '^', 'F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F']]
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G']]
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else int (
5. unmatched ( int
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token int type identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token int type number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G int int ['G']
Popped  ['G']  with rule  ['G']
Popped  (((  with rule  ['G']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F']]
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F int int ['F']
Popped  ['F']  with rule  ['F']
Popped  (((  with rule  ['F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"]]
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T int int ['T', "E'"]
Popped  ['T', "E'"]  with rule  ['T', "E'"]
Popped  (((  with rule  ['T', "E'"]
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E']]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T']]
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"]]
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else int (
5. unmatched ( int
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token int type identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token int type number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G int int ['G', '^', 'F']
Popped  ['G', '^', 'F']  with rule  ['G', '^', 'F']
Popped  (((  with rule  ['G', '^', 'F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"]]
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G']]
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else int (
5. unmatched ( int
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token int type identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token int type number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G int int ['G']
Popped  ['G']  with rule  ['G']
Popped  (((  with rule  ['G']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"]]
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F int int ['F', "T'"]
Popped  ['F', "T'"]  with rule  ['F', "T'"]
Popped  (((  with rule  ['F', "T'"]
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T']]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F']]
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F']]
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else int (
5. unmatched ( int
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token int type identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token int type number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G int int ['G', '^', 'F']
Popped  ['G', '^', 'F']  with rule  ['G', '^', 'F']
Popped  (((  with rule  ['G', '^', 'F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F']]
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G']]
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else int (
5. unmatched ( int
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token int type identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token int type number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G int int ['G']
Popped  ['G']  with rule  ['G']
Popped  (((  with rule  ['G']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F']]
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F int int ['F']
Popped  ['F']  with rule  ['F']
Popped  (((  with rule  ['F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T']]
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T int int ['T']
Popped  ['T']  with rule  ['T']
Popped  (((  with rule  ['T']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E']]
returned false  ['T'] [['T', "E'"], ['T']]
2. unmatched E int int ['E']
Popped  ['E']  with rule  ['E']
Popped  (((  with rule  ['E']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
returned false  ['E'] [['E']]
2. unmatched EXPRESSION int int ['EXPRESSION', 'relational_operator', 'EXPRESSION']
Popped  ['EXPRESSION', 'relational_operator', 'EXPRESSION']  with rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']
Popped  (((  with rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST']]
returned false  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
2. unmatched IF_COND int int ['IF_COND', 'ST']
Popped  ['IF_COND', 'ST']  with rule  ['IF_COND', 'ST']
Popped  (((  with rule  ['IF_COND', 'ST']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST']]
returned false  ['IF_COND', 'ST'] [['IF_COND', 'ST'], ['IF_COND']]
in rule  ['IF_COND']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND']]
in symbol IF_COND 		(in rule  ['IF_COND'] )
in producer
in match rule with  IF_COND : [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']]
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] )
else int if
5. unmatched if int
Popped  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']
Popped  (((  with rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND']]
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']]
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] )
else int if
5. unmatched if int
Popped  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']
Popped  (((  with rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND']]
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in symbol EXPRESSION 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E']]
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"]]
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"]]
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else int (
5. unmatched ( int
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token int type identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token int type number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G int int ['G', '^', 'F']
Popped  ['G', '^', 'F']  with rule  ['G', '^', 'F']
Popped  (((  with rule  ['G', '^', 'F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"]]
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G']]
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else int (
5. unmatched ( int
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token int type identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token int type number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G int int ['G']
Popped  ['G']  with rule  ['G']
Popped  (((  with rule  ['G']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"]]
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F int int ['F', "T'"]
Popped  ['F', "T'"]  with rule  ['F', "T'"]
Popped  (((  with rule  ['F', "T'"]
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"]]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F']]
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F']]
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else int (
5. unmatched ( int
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token int type identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token int type number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G int int ['G', '^', 'F']
Popped  ['G', '^', 'F']  with rule  ['G', '^', 'F']
Popped  (((  with rule  ['G', '^', 'F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F']]
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G']]
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else int (
5. unmatched ( int
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token int type identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token int type number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G int int ['G']
Popped  ['G']  with rule  ['G']
Popped  (((  with rule  ['G']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F']]
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F int int ['F']
Popped  ['F']  with rule  ['F']
Popped  (((  with rule  ['F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"]]
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T int int ['T', "E'"]
Popped  ['T', "E'"]  with rule  ['T', "E'"]
Popped  (((  with rule  ['T', "E'"]
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E']]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T']]
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"]]
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else int (
5. unmatched ( int
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token int type identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token int type number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G int int ['G', '^', 'F']
Popped  ['G', '^', 'F']  with rule  ['G', '^', 'F']
Popped  (((  with rule  ['G', '^', 'F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"]]
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G']]
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else int (
5. unmatched ( int
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token int type identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token int type number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G int int ['G']
Popped  ['G']  with rule  ['G']
Popped  (((  with rule  ['G']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"]]
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F int int ['F', "T'"]
Popped  ['F', "T'"]  with rule  ['F', "T'"]
Popped  (((  with rule  ['F', "T'"]
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T']]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F']]
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F']]
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else int (
5. unmatched ( int
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token int type identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token int type number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G int int ['G', '^', 'F']
Popped  ['G', '^', 'F']  with rule  ['G', '^', 'F']
Popped  (((  with rule  ['G', '^', 'F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F']]
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G']]
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else int (
5. unmatched ( int
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token int type identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token int type number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G int int ['G']
Popped  ['G']  with rule  ['G']
Popped  (((  with rule  ['G']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F']]
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F int int ['F']
Popped  ['F']  with rule  ['F']
Popped  (((  with rule  ['F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T']]
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T int int ['T']
Popped  ['T']  with rule  ['T']
Popped  (((  with rule  ['T']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E']]
returned false  ['T'] [['T', "E'"], ['T']]
2. unmatched E int int ['E']
Popped  ['E']  with rule  ['E']
Popped  (((  with rule  ['E']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
returned false  ['E'] [['E']]
2. unmatched EXPRESSION int int ['EXPRESSION', 'relational_operator', 'EXPRESSION']
Popped  ['EXPRESSION', 'relational_operator', 'EXPRESSION']  with rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']
Popped  (((  with rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST'], '(((', ['IF_COND']]
returned false  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
2. unmatched IF_COND int int ['IF_COND']
Popped  ['IF_COND']  with rule  ['IF_COND']
Popped  (((  with rule  ['IF_COND']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['IF_COND_ST']]
returned false  ['IF_COND'] [['IF_COND', 'ST'], ['IF_COND']]
2. unmatched IF_COND_ST int int ['IF_COND_ST']
Popped  ['IF_COND_ST']  with rule  ['IF_COND_ST']
Popped  (((  with rule  ['IF_COND_ST']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof']]
returned false  ['IF_COND_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['ASSIGN_ST']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['ASSIGN_ST']]
in symbol ASSIGN_ST 		(in rule  ['ASSIGN_ST'] )
in producer
in match rule with  ASSIGN_ST : [['ASSIGN', 'ST'], ['ASSIGN']]
in rule  ['ASSIGN', 'ST']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['ASSIGN_ST'], '(((', ['ASSIGN', 'ST']]
in symbol ASSIGN 		(in rule  ['ASSIGN', 'ST'] )
in producer
in match rule with  ASSIGN : [['identifier', '=', 'EXPRESSION', ';']]
in rule  ['identifier', '=', 'EXPRESSION', ';']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['ASSIGN_ST'], '(((', ['ASSIGN', 'ST'], '(((', ['identifier', '=', 'EXPRESSION', ';']]
in symbol identifier 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
is token
in match token int type identifier
4. unmatched token
Popped  ['identifier', '=', 'EXPRESSION', ';']  with rule  ['identifier', '=', 'EXPRESSION', ';']
Popped  (((  with rule  ['identifier', '=', 'EXPRESSION', ';']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['ASSIGN_ST'], '(((', ['ASSIGN', 'ST']]
returned false  ['identifier', '=', 'EXPRESSION', ';'] [['identifier', '=', 'EXPRESSION', ';']]
2. unmatched ASSIGN int int ['ASSIGN', 'ST']
Popped  ['ASSIGN', 'ST']  with rule  ['ASSIGN', 'ST']
Popped  (((  with rule  ['ASSIGN', 'ST']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['ASSIGN_ST']]
returned false  ['ASSIGN', 'ST'] [['ASSIGN', 'ST'], ['ASSIGN']]
in rule  ['ASSIGN']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['ASSIGN_ST'], '(((', ['ASSIGN']]
in symbol ASSIGN 		(in rule  ['ASSIGN'] )
in producer
in match rule with  ASSIGN : [['identifier', '=', 'EXPRESSION', ';']]
in rule  ['identifier', '=', 'EXPRESSION', ';']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['ASSIGN_ST'], '(((', ['ASSIGN'], '(((', ['identifier', '=', 'EXPRESSION', ';']]
in symbol identifier 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
is token
in match token int type identifier
4. unmatched token
Popped  ['identifier', '=', 'EXPRESSION', ';']  with rule  ['identifier', '=', 'EXPRESSION', ';']
Popped  (((  with rule  ['identifier', '=', 'EXPRESSION', ';']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['ASSIGN_ST'], '(((', ['ASSIGN']]
returned false  ['identifier', '=', 'EXPRESSION', ';'] [['identifier', '=', 'EXPRESSION', ';']]
2. unmatched ASSIGN int int ['ASSIGN']
Popped  ['ASSIGN']  with rule  ['ASSIGN']
Popped  (((  with rule  ['ASSIGN']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['ASSIGN_ST']]
returned false  ['ASSIGN'] [['ASSIGN', 'ST'], ['ASSIGN']]
2. unmatched ASSIGN_ST int int ['ASSIGN_ST']
Popped  ['ASSIGN_ST']  with rule  ['ASSIGN_ST']
Popped  (((  with rule  ['ASSIGN_ST']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof']]
returned false  ['ASSIGN_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['DECL_ST']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST']]
in symbol DECL_ST 		(in rule  ['DECL_ST'] )
in producer
in match rule with  DECL_ST : [['DECL', 'ST'], ['DECL']]
in rule  ['DECL', 'ST']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST']]
in symbol DECL 		(in rule  ['DECL', 'ST'] )
in producer
in match rule with  DECL : [['type', 'identifier', ';']]
in rule  ['type', 'identifier', ';']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';']]
in symbol type 		(in rule  ['type', 'identifier', ';'] )
is token
in match token int type type
matched
2. temp store i i
in symbol identifier 		(in rule  ['type', 'identifier', ';'] )
is token
in match token i identifier identifier
matched
2. temp store ; ;
in symbol ; 		(in rule  ['type', 'identifier', ';'] )
else ; ;
matched
here we are ['type', 'identifier', ';'] [['type', 'identifier', ';']] 0
1.SYMBOL in RULE DECL ['DECL', 'ST']
1. temp store eof eof
in symbol ST 		(in rule  ['DECL', 'ST'] )
in producer
in match rule with  ST : [['STATEMENT_ST']]
in rule  ['STATEMENT_ST']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST']]
in symbol STATEMENT_ST 		(in rule  ['STATEMENT_ST'] )
in producer
in match rule with  STATEMENT_ST : [['STATEMENT', ';', 'ST'], ['STATEMENT']]
in rule  ['STATEMENT', ';', 'ST']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST']]
in symbol STATEMENT 		(in rule  ['STATEMENT', ';', 'ST'] )
in producer
in match rule with  STATEMENT : [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['FOR_LOOP_ST']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['FOR_LOOP_ST']]
in symbol FOR_LOOP_ST 		(in rule  ['FOR_LOOP_ST'] )
in producer
in match rule with  FOR_LOOP_ST : [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
in rule  ['FOR_LOOP', 'ST']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['FOR_LOOP_ST'], '(((', ['FOR_LOOP', 'ST']]
in symbol FOR_LOOP 		(in rule  ['FOR_LOOP', 'ST'] )
in producer
in match rule with  FOR_LOOP : [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['FOR_LOOP_ST'], '(((', ['FOR_LOOP', 'ST'], '(((', ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in symbol for 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else eof for
5. unmatched for eof
Popped  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']
Popped  (((  with rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['FOR_LOOP_ST'], '(((', ['FOR_LOOP', 'ST']]
returned false  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
2. unmatched FOR_LOOP eof eof ['FOR_LOOP', 'ST']
Popped  ['FOR_LOOP', 'ST']  with rule  ['FOR_LOOP', 'ST']
Popped  (((  with rule  ['FOR_LOOP', 'ST']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['FOR_LOOP_ST']]
returned false  ['FOR_LOOP', 'ST'] [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
in rule  ['FOR_LOOP']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['FOR_LOOP_ST'], '(((', ['FOR_LOOP']]
in symbol FOR_LOOP 		(in rule  ['FOR_LOOP'] )
in producer
in match rule with  FOR_LOOP : [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['FOR_LOOP_ST'], '(((', ['FOR_LOOP'], '(((', ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in symbol for 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else eof for
5. unmatched for eof
Popped  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']
Popped  (((  with rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['FOR_LOOP_ST'], '(((', ['FOR_LOOP']]
returned false  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
2. unmatched FOR_LOOP eof eof ['FOR_LOOP']
Popped  ['FOR_LOOP']  with rule  ['FOR_LOOP']
Popped  (((  with rule  ['FOR_LOOP']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['FOR_LOOP_ST']]
returned false  ['FOR_LOOP'] [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
2. unmatched FOR_LOOP_ST eof eof ['FOR_LOOP_ST']
Popped  ['FOR_LOOP_ST']  with rule  ['FOR_LOOP_ST']
Popped  (((  with rule  ['FOR_LOOP_ST']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST']]
returned false  ['FOR_LOOP_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['IF_COND_ST']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST']]
in symbol IF_COND_ST 		(in rule  ['IF_COND_ST'] )
in producer
in match rule with  IF_COND_ST : [['IF_COND', 'ST'], ['IF_COND']]
in rule  ['IF_COND', 'ST']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST']]
in symbol IF_COND 		(in rule  ['IF_COND', 'ST'] )
in producer
in match rule with  IF_COND : [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']]
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] )
else eof if
5. unmatched if eof
Popped  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']
Popped  (((  with rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST']]
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']]
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] )
else eof if
5. unmatched if eof
Popped  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']
Popped  (((  with rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST']]
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in symbol EXPRESSION 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E']]
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"]]
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"]]
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G', '^', 'F']
Popped  ['G', '^', 'F']  with rule  ['G', '^', 'F']
Popped  (((  with rule  ['G', '^', 'F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"]]
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G']]
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G']
Popped  ['G']  with rule  ['G']
Popped  (((  with rule  ['G']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"]]
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F eof eof ['F', "T'"]
Popped  ['F', "T'"]  with rule  ['F', "T'"]
Popped  (((  with rule  ['F', "T'"]
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"]]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F']]
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F']]
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G', '^', 'F']
Popped  ['G', '^', 'F']  with rule  ['G', '^', 'F']
Popped  (((  with rule  ['G', '^', 'F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F']]
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G']]
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G']
Popped  ['G']  with rule  ['G']
Popped  (((  with rule  ['G']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F']]
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F eof eof ['F']
Popped  ['F']  with rule  ['F']
Popped  (((  with rule  ['F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"]]
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T eof eof ['T', "E'"]
Popped  ['T', "E'"]  with rule  ['T', "E'"]
Popped  (((  with rule  ['T', "E'"]
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E']]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T']]
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"]]
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G', '^', 'F']
Popped  ['G', '^', 'F']  with rule  ['G', '^', 'F']
Popped  (((  with rule  ['G', '^', 'F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"]]
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G']]
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G']
Popped  ['G']  with rule  ['G']
Popped  (((  with rule  ['G']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"]]
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F eof eof ['F', "T'"]
Popped  ['F', "T'"]  with rule  ['F', "T'"]
Popped  (((  with rule  ['F', "T'"]
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T']]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F']]
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F']]
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G', '^', 'F']
Popped  ['G', '^', 'F']  with rule  ['G', '^', 'F']
Popped  (((  with rule  ['G', '^', 'F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F']]
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G']]
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G']
Popped  ['G']  with rule  ['G']
Popped  (((  with rule  ['G']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F']]
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F eof eof ['F']
Popped  ['F']  with rule  ['F']
Popped  (((  with rule  ['F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T']]
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T eof eof ['T']
Popped  ['T']  with rule  ['T']
Popped  (((  with rule  ['T']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E']]
returned false  ['T'] [['T', "E'"], ['T']]
2. unmatched E eof eof ['E']
Popped  ['E']  with rule  ['E']
Popped  (((  with rule  ['E']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
returned false  ['E'] [['E']]
2. unmatched EXPRESSION eof eof ['EXPRESSION', 'relational_operator', 'EXPRESSION']
Popped  ['EXPRESSION', 'relational_operator', 'EXPRESSION']  with rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']
Popped  (((  with rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST']]
returned false  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
2. unmatched IF_COND eof eof ['IF_COND', 'ST']
Popped  ['IF_COND', 'ST']  with rule  ['IF_COND', 'ST']
Popped  (((  with rule  ['IF_COND', 'ST']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST']]
returned false  ['IF_COND', 'ST'] [['IF_COND', 'ST'], ['IF_COND']]
in rule  ['IF_COND']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND']]
in symbol IF_COND 		(in rule  ['IF_COND'] )
in producer
in match rule with  IF_COND : [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']]
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] )
else eof if
5. unmatched if eof
Popped  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']
Popped  (((  with rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND']]
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']]
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] )
else eof if
5. unmatched if eof
Popped  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']
Popped  (((  with rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND']]
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in symbol EXPRESSION 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E']]
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"]]
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"]]
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G', '^', 'F']
Popped  ['G', '^', 'F']  with rule  ['G', '^', 'F']
Popped  (((  with rule  ['G', '^', 'F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"]]
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G']]
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G']
Popped  ['G']  with rule  ['G']
Popped  (((  with rule  ['G']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"]]
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F eof eof ['F', "T'"]
Popped  ['F', "T'"]  with rule  ['F', "T'"]
Popped  (((  with rule  ['F', "T'"]
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"]]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F']]
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F']]
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G', '^', 'F']
Popped  ['G', '^', 'F']  with rule  ['G', '^', 'F']
Popped  (((  with rule  ['G', '^', 'F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F']]
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G']]
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G']
Popped  ['G']  with rule  ['G']
Popped  (((  with rule  ['G']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F']]
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F eof eof ['F']
Popped  ['F']  with rule  ['F']
Popped  (((  with rule  ['F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"]]
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T eof eof ['T', "E'"]
Popped  ['T', "E'"]  with rule  ['T', "E'"]
Popped  (((  with rule  ['T', "E'"]
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E']]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T']]
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"]]
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G', '^', 'F']
Popped  ['G', '^', 'F']  with rule  ['G', '^', 'F']
Popped  (((  with rule  ['G', '^', 'F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"]]
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G']]
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G']
Popped  ['G']  with rule  ['G']
Popped  (((  with rule  ['G']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"]]
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F eof eof ['F', "T'"]
Popped  ['F', "T'"]  with rule  ['F', "T'"]
Popped  (((  with rule  ['F', "T'"]
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T']]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F']]
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F']]
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G', '^', 'F']
Popped  ['G', '^', 'F']  with rule  ['G', '^', 'F']
Popped  (((  with rule  ['G', '^', 'F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F']]
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G']]
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G']
Popped  ['G']  with rule  ['G']
Popped  (((  with rule  ['G']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F']]
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F eof eof ['F']
Popped  ['F']  with rule  ['F']
Popped  (((  with rule  ['F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T']]
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T eof eof ['T']
Popped  ['T']  with rule  ['T']
Popped  (((  with rule  ['T']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E']]
returned false  ['T'] [['T', "E'"], ['T']]
2. unmatched E eof eof ['E']
Popped  ['E']  with rule  ['E']
Popped  (((  with rule  ['E']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
returned false  ['E'] [['E']]
2. unmatched EXPRESSION eof eof ['EXPRESSION', 'relational_operator', 'EXPRESSION']
Popped  ['EXPRESSION', 'relational_operator', 'EXPRESSION']  with rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']
Popped  (((  with rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST'], '(((', ['IF_COND']]
returned false  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
2. unmatched IF_COND eof eof ['IF_COND']
Popped  ['IF_COND']  with rule  ['IF_COND']
Popped  (((  with rule  ['IF_COND']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['IF_COND_ST']]
returned false  ['IF_COND'] [['IF_COND', 'ST'], ['IF_COND']]
2. unmatched IF_COND_ST eof eof ['IF_COND_ST']
Popped  ['IF_COND_ST']  with rule  ['IF_COND_ST']
Popped  (((  with rule  ['IF_COND_ST']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST']]
returned false  ['IF_COND_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['ASSIGN_ST']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['ASSIGN_ST']]
in symbol ASSIGN_ST 		(in rule  ['ASSIGN_ST'] )
in producer
in match rule with  ASSIGN_ST : [['ASSIGN', 'ST'], ['ASSIGN']]
in rule  ['ASSIGN', 'ST']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['ASSIGN_ST'], '(((', ['ASSIGN', 'ST']]
in symbol ASSIGN 		(in rule  ['ASSIGN', 'ST'] )
in producer
in match rule with  ASSIGN : [['identifier', '=', 'EXPRESSION', ';']]
in rule  ['identifier', '=', 'EXPRESSION', ';']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['ASSIGN_ST'], '(((', ['ASSIGN', 'ST'], '(((', ['identifier', '=', 'EXPRESSION', ';']]
in symbol identifier 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier', '=', 'EXPRESSION', ';']  with rule  ['identifier', '=', 'EXPRESSION', ';']
Popped  (((  with rule  ['identifier', '=', 'EXPRESSION', ';']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['ASSIGN_ST'], '(((', ['ASSIGN', 'ST']]
returned false  ['identifier', '=', 'EXPRESSION', ';'] [['identifier', '=', 'EXPRESSION', ';']]
2. unmatched ASSIGN eof eof ['ASSIGN', 'ST']
Popped  ['ASSIGN', 'ST']  with rule  ['ASSIGN', 'ST']
Popped  (((  with rule  ['ASSIGN', 'ST']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['ASSIGN_ST']]
returned false  ['ASSIGN', 'ST'] [['ASSIGN', 'ST'], ['ASSIGN']]
in rule  ['ASSIGN']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['ASSIGN_ST'], '(((', ['ASSIGN']]
in symbol ASSIGN 		(in rule  ['ASSIGN'] )
in producer
in match rule with  ASSIGN : [['identifier', '=', 'EXPRESSION', ';']]
in rule  ['identifier', '=', 'EXPRESSION', ';']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['ASSIGN_ST'], '(((', ['ASSIGN'], '(((', ['identifier', '=', 'EXPRESSION', ';']]
in symbol identifier 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier', '=', 'EXPRESSION', ';']  with rule  ['identifier', '=', 'EXPRESSION', ';']
Popped  (((  with rule  ['identifier', '=', 'EXPRESSION', ';']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['ASSIGN_ST'], '(((', ['ASSIGN']]
returned false  ['identifier', '=', 'EXPRESSION', ';'] [['identifier', '=', 'EXPRESSION', ';']]
2. unmatched ASSIGN eof eof ['ASSIGN']
Popped  ['ASSIGN']  with rule  ['ASSIGN']
Popped  (((  with rule  ['ASSIGN']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['ASSIGN_ST']]
returned false  ['ASSIGN'] [['ASSIGN', 'ST'], ['ASSIGN']]
2. unmatched ASSIGN_ST eof eof ['ASSIGN_ST']
Popped  ['ASSIGN_ST']  with rule  ['ASSIGN_ST']
Popped  (((  with rule  ['ASSIGN_ST']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST']]
returned false  ['ASSIGN_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['DECL_ST']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['DECL_ST']]
in symbol DECL_ST 		(in rule  ['DECL_ST'] )
in producer
in match rule with  DECL_ST : [['DECL', 'ST'], ['DECL']]
in rule  ['DECL', 'ST']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST']]
in symbol DECL 		(in rule  ['DECL', 'ST'] )
in producer
in match rule with  DECL : [['type', 'identifier', ';']]
in rule  ['type', 'identifier', ';']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';']]
in symbol type 		(in rule  ['type', 'identifier', ';'] )
is token
in match token eof eof type
4. unmatched token
Popped  ['type', 'identifier', ';']  with rule  ['type', 'identifier', ';']
Popped  (((  with rule  ['type', 'identifier', ';']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST']]
returned false  ['type', 'identifier', ';'] [['type', 'identifier', ';']]
2. unmatched DECL eof eof ['DECL', 'ST']
Popped  ['DECL', 'ST']  with rule  ['DECL', 'ST']
Popped  (((  with rule  ['DECL', 'ST']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['DECL_ST']]
returned false  ['DECL', 'ST'] [['DECL', 'ST'], ['DECL']]
in rule  ['DECL']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['DECL_ST'], '(((', ['DECL']]
in symbol DECL 		(in rule  ['DECL'] )
in producer
in match rule with  DECL : [['type', 'identifier', ';']]
in rule  ['type', 'identifier', ';']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['DECL_ST'], '(((', ['DECL'], '(((', ['type', 'identifier', ';']]
in symbol type 		(in rule  ['type', 'identifier', ';'] )
is token
in match token eof eof type
4. unmatched token
Popped  ['type', 'identifier', ';']  with rule  ['type', 'identifier', ';']
Popped  (((  with rule  ['type', 'identifier', ';']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['DECL_ST'], '(((', ['DECL']]
returned false  ['type', 'identifier', ';'] [['type', 'identifier', ';']]
2. unmatched DECL eof eof ['DECL']
Popped  ['DECL']  with rule  ['DECL']
Popped  (((  with rule  ['DECL']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST'], '(((', ['DECL_ST']]
returned false  ['DECL'] [['DECL', 'ST'], ['DECL']]
2. unmatched DECL_ST eof eof ['DECL_ST']
Popped  ['DECL_ST']  with rule  ['DECL_ST']
Popped  (((  with rule  ['DECL_ST']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT', ';', 'ST']]
returned false  ['DECL_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
2. unmatched STATEMENT eof eof ['STATEMENT', ';', 'ST']
Popped  ['STATEMENT', ';', 'ST']  with rule  ['STATEMENT', ';', 'ST']
Popped  (((  with rule  ['STATEMENT', ';', 'ST']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST']]
returned false  ['STATEMENT', ';', 'ST'] [['STATEMENT', ';', 'ST'], ['STATEMENT']]
in rule  ['STATEMENT']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT']]
in symbol STATEMENT 		(in rule  ['STATEMENT'] )
in producer
in match rule with  STATEMENT : [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['FOR_LOOP_ST']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['FOR_LOOP_ST']]
in symbol FOR_LOOP_ST 		(in rule  ['FOR_LOOP_ST'] )
in producer
in match rule with  FOR_LOOP_ST : [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
in rule  ['FOR_LOOP', 'ST']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['FOR_LOOP_ST'], '(((', ['FOR_LOOP', 'ST']]
in symbol FOR_LOOP 		(in rule  ['FOR_LOOP', 'ST'] )
in producer
in match rule with  FOR_LOOP : [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['FOR_LOOP_ST'], '(((', ['FOR_LOOP', 'ST'], '(((', ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in symbol for 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else eof for
5. unmatched for eof
Popped  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']
Popped  (((  with rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['FOR_LOOP_ST'], '(((', ['FOR_LOOP', 'ST']]
returned false  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
2. unmatched FOR_LOOP eof eof ['FOR_LOOP', 'ST']
Popped  ['FOR_LOOP', 'ST']  with rule  ['FOR_LOOP', 'ST']
Popped  (((  with rule  ['FOR_LOOP', 'ST']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['FOR_LOOP_ST']]
returned false  ['FOR_LOOP', 'ST'] [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
in rule  ['FOR_LOOP']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['FOR_LOOP_ST'], '(((', ['FOR_LOOP']]
in symbol FOR_LOOP 		(in rule  ['FOR_LOOP'] )
in producer
in match rule with  FOR_LOOP : [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['FOR_LOOP_ST'], '(((', ['FOR_LOOP'], '(((', ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in symbol for 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else eof for
5. unmatched for eof
Popped  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']
Popped  (((  with rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['FOR_LOOP_ST'], '(((', ['FOR_LOOP']]
returned false  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
2. unmatched FOR_LOOP eof eof ['FOR_LOOP']
Popped  ['FOR_LOOP']  with rule  ['FOR_LOOP']
Popped  (((  with rule  ['FOR_LOOP']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['FOR_LOOP_ST']]
returned false  ['FOR_LOOP'] [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
2. unmatched FOR_LOOP_ST eof eof ['FOR_LOOP_ST']
Popped  ['FOR_LOOP_ST']  with rule  ['FOR_LOOP_ST']
Popped  (((  with rule  ['FOR_LOOP_ST']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT']]
returned false  ['FOR_LOOP_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['IF_COND_ST']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST']]
in symbol IF_COND_ST 		(in rule  ['IF_COND_ST'] )
in producer
in match rule with  IF_COND_ST : [['IF_COND', 'ST'], ['IF_COND']]
in rule  ['IF_COND', 'ST']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST']]
in symbol IF_COND 		(in rule  ['IF_COND', 'ST'] )
in producer
in match rule with  IF_COND : [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']]
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] )
else eof if
5. unmatched if eof
Popped  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']
Popped  (((  with rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST']]
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']]
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] )
else eof if
5. unmatched if eof
Popped  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']
Popped  (((  with rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST']]
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in symbol EXPRESSION 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E']]
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"]]
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"]]
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G', '^', 'F']
Popped  ['G', '^', 'F']  with rule  ['G', '^', 'F']
Popped  (((  with rule  ['G', '^', 'F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"]]
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G']]
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G']
Popped  ['G']  with rule  ['G']
Popped  (((  with rule  ['G']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"]]
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F eof eof ['F', "T'"]
Popped  ['F', "T'"]  with rule  ['F', "T'"]
Popped  (((  with rule  ['F', "T'"]
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"]]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F']]
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F']]
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G', '^', 'F']
Popped  ['G', '^', 'F']  with rule  ['G', '^', 'F']
Popped  (((  with rule  ['G', '^', 'F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F']]
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G']]
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G']
Popped  ['G']  with rule  ['G']
Popped  (((  with rule  ['G']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F']]
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F eof eof ['F']
Popped  ['F']  with rule  ['F']
Popped  (((  with rule  ['F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"]]
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T eof eof ['T', "E'"]
Popped  ['T', "E'"]  with rule  ['T', "E'"]
Popped  (((  with rule  ['T', "E'"]
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E']]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T']]
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"]]
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G', '^', 'F']
Popped  ['G', '^', 'F']  with rule  ['G', '^', 'F']
Popped  (((  with rule  ['G', '^', 'F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"]]
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G']]
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G']
Popped  ['G']  with rule  ['G']
Popped  (((  with rule  ['G']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"]]
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F eof eof ['F', "T'"]
Popped  ['F', "T'"]  with rule  ['F', "T'"]
Popped  (((  with rule  ['F', "T'"]
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T']]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F']]
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F']]
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G', '^', 'F']
Popped  ['G', '^', 'F']  with rule  ['G', '^', 'F']
Popped  (((  with rule  ['G', '^', 'F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F']]
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G']]
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G']
Popped  ['G']  with rule  ['G']
Popped  (((  with rule  ['G']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F']]
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F eof eof ['F']
Popped  ['F']  with rule  ['F']
Popped  (((  with rule  ['F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T']]
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T eof eof ['T']
Popped  ['T']  with rule  ['T']
Popped  (((  with rule  ['T']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E']]
returned false  ['T'] [['T', "E'"], ['T']]
2. unmatched E eof eof ['E']
Popped  ['E']  with rule  ['E']
Popped  (((  with rule  ['E']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
returned false  ['E'] [['E']]
2. unmatched EXPRESSION eof eof ['EXPRESSION', 'relational_operator', 'EXPRESSION']
Popped  ['EXPRESSION', 'relational_operator', 'EXPRESSION']  with rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']
Popped  (((  with rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND', 'ST']]
returned false  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
2. unmatched IF_COND eof eof ['IF_COND', 'ST']
Popped  ['IF_COND', 'ST']  with rule  ['IF_COND', 'ST']
Popped  (((  with rule  ['IF_COND', 'ST']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST']]
returned false  ['IF_COND', 'ST'] [['IF_COND', 'ST'], ['IF_COND']]
in rule  ['IF_COND']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND']]
in symbol IF_COND 		(in rule  ['IF_COND'] )
in producer
in match rule with  IF_COND : [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']]
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] )
else eof if
5. unmatched if eof
Popped  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']
Popped  (((  with rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND']]
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']]
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] )
else eof if
5. unmatched if eof
Popped  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']
Popped  (((  with rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND']]
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in symbol EXPRESSION 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E']]
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"]]
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"]]
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G', '^', 'F']
Popped  ['G', '^', 'F']  with rule  ['G', '^', 'F']
Popped  (((  with rule  ['G', '^', 'F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"]]
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G']]
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G']
Popped  ['G']  with rule  ['G']
Popped  (((  with rule  ['G']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F', "T'"]]
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F eof eof ['F', "T'"]
Popped  ['F', "T'"]  with rule  ['F', "T'"]
Popped  (((  with rule  ['F', "T'"]
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"]]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F']]
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F']]
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G', '^', 'F']
Popped  ['G', '^', 'F']  with rule  ['G', '^', 'F']
Popped  (((  with rule  ['G', '^', 'F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F']]
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G']]
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F'], '(((', ['G']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G']
Popped  ['G']  with rule  ['G']
Popped  (((  with rule  ['G']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"], '(((', ['F']]
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F eof eof ['F']
Popped  ['F']  with rule  ['F']
Popped  (((  with rule  ['F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T', "E'"]]
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T eof eof ['T', "E'"]
Popped  ['T', "E'"]  with rule  ['T', "E'"]
Popped  (((  with rule  ['T', "E'"]
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E']]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T']]
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"]]
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G', '^', 'F']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G', '^', 'F']
Popped  ['G', '^', 'F']  with rule  ['G', '^', 'F']
Popped  (((  with rule  ['G', '^', 'F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"]]
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G']]
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"], '(((', ['G']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G']
Popped  ['G']  with rule  ['G']
Popped  (((  with rule  ['G']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F', "T'"]]
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F eof eof ['F', "T'"]
Popped  ['F', "T'"]  with rule  ['F', "T'"]
Popped  (((  with rule  ['F', "T'"]
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T']]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F']]
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F']]
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G', '^', 'F']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G', '^', 'F']
Popped  ['G', '^', 'F']  with rule  ['G', '^', 'F']
Popped  (((  with rule  ['G', '^', 'F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F']]
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G']]
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G'], '(((', ['(', 'E', ')']]
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
Popped  ['(', 'E', ')']  with rule  ['(', 'E', ')']
Popped  (((  with rule  ['(', 'E', ')']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G']]
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G'], '(((', ['identifier']]
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier']  with rule  ['identifier']
Popped  (((  with rule  ['identifier']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G']]
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G'], '(((', ['number']]
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
Popped  ['number']  with rule  ['number']
Popped  (((  with rule  ['number']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F'], '(((', ['G']]
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G']
Popped  ['G']  with rule  ['G']
Popped  (((  with rule  ['G']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T'], '(((', ['F']]
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F eof eof ['F']
Popped  ['F']  with rule  ['F']
Popped  (((  with rule  ['F']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E'], '(((', ['T']]
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T eof eof ['T']
Popped  ['T']  with rule  ['T']
Popped  (((  with rule  ['T']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION'], '(((', ['E']]
returned false  ['T'] [['T', "E'"], ['T']]
2. unmatched E eof eof ['E']
Popped  ['E']  with rule  ['E']
Popped  (((  with rule  ['E']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND'], '(((', ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
returned false  ['E'] [['E']]
2. unmatched EXPRESSION eof eof ['EXPRESSION', 'relational_operator', 'EXPRESSION']
Popped  ['EXPRESSION', 'relational_operator', 'EXPRESSION']  with rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']
Popped  (((  with rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST'], '(((', ['IF_COND']]
returned false  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
2. unmatched IF_COND eof eof ['IF_COND']
Popped  ['IF_COND']  with rule  ['IF_COND']
Popped  (((  with rule  ['IF_COND']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['IF_COND_ST']]
returned false  ['IF_COND'] [['IF_COND', 'ST'], ['IF_COND']]
2. unmatched IF_COND_ST eof eof ['IF_COND_ST']
Popped  ['IF_COND_ST']  with rule  ['IF_COND_ST']
Popped  (((  with rule  ['IF_COND_ST']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT']]
returned false  ['IF_COND_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['ASSIGN_ST']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['ASSIGN_ST']]
in symbol ASSIGN_ST 		(in rule  ['ASSIGN_ST'] )
in producer
in match rule with  ASSIGN_ST : [['ASSIGN', 'ST'], ['ASSIGN']]
in rule  ['ASSIGN', 'ST']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['ASSIGN_ST'], '(((', ['ASSIGN', 'ST']]
in symbol ASSIGN 		(in rule  ['ASSIGN', 'ST'] )
in producer
in match rule with  ASSIGN : [['identifier', '=', 'EXPRESSION', ';']]
in rule  ['identifier', '=', 'EXPRESSION', ';']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['ASSIGN_ST'], '(((', ['ASSIGN', 'ST'], '(((', ['identifier', '=', 'EXPRESSION', ';']]
in symbol identifier 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier', '=', 'EXPRESSION', ';']  with rule  ['identifier', '=', 'EXPRESSION', ';']
Popped  (((  with rule  ['identifier', '=', 'EXPRESSION', ';']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['ASSIGN_ST'], '(((', ['ASSIGN', 'ST']]
returned false  ['identifier', '=', 'EXPRESSION', ';'] [['identifier', '=', 'EXPRESSION', ';']]
2. unmatched ASSIGN eof eof ['ASSIGN', 'ST']
Popped  ['ASSIGN', 'ST']  with rule  ['ASSIGN', 'ST']
Popped  (((  with rule  ['ASSIGN', 'ST']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['ASSIGN_ST']]
returned false  ['ASSIGN', 'ST'] [['ASSIGN', 'ST'], ['ASSIGN']]
in rule  ['ASSIGN']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['ASSIGN_ST'], '(((', ['ASSIGN']]
in symbol ASSIGN 		(in rule  ['ASSIGN'] )
in producer
in match rule with  ASSIGN : [['identifier', '=', 'EXPRESSION', ';']]
in rule  ['identifier', '=', 'EXPRESSION', ';']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['ASSIGN_ST'], '(((', ['ASSIGN'], '(((', ['identifier', '=', 'EXPRESSION', ';']]
in symbol identifier 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
is token
in match token eof eof identifier
4. unmatched token
Popped  ['identifier', '=', 'EXPRESSION', ';']  with rule  ['identifier', '=', 'EXPRESSION', ';']
Popped  (((  with rule  ['identifier', '=', 'EXPRESSION', ';']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['ASSIGN_ST'], '(((', ['ASSIGN']]
returned false  ['identifier', '=', 'EXPRESSION', ';'] [['identifier', '=', 'EXPRESSION', ';']]
2. unmatched ASSIGN eof eof ['ASSIGN']
Popped  ['ASSIGN']  with rule  ['ASSIGN']
Popped  (((  with rule  ['ASSIGN']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['ASSIGN_ST']]
returned false  ['ASSIGN'] [['ASSIGN', 'ST'], ['ASSIGN']]
2. unmatched ASSIGN_ST eof eof ['ASSIGN_ST']
Popped  ['ASSIGN_ST']  with rule  ['ASSIGN_ST']
Popped  (((  with rule  ['ASSIGN_ST']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT']]
returned false  ['ASSIGN_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['DECL_ST']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['DECL_ST']]
in symbol DECL_ST 		(in rule  ['DECL_ST'] )
in producer
in match rule with  DECL_ST : [['DECL', 'ST'], ['DECL']]
in rule  ['DECL', 'ST']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST']]
in symbol DECL 		(in rule  ['DECL', 'ST'] )
in producer
in match rule with  DECL : [['type', 'identifier', ';']]
in rule  ['type', 'identifier', ';']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';']]
in symbol type 		(in rule  ['type', 'identifier', ';'] )
is token
in match token eof eof type
4. unmatched token
Popped  ['type', 'identifier', ';']  with rule  ['type', 'identifier', ';']
Popped  (((  with rule  ['type', 'identifier', ';']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST']]
returned false  ['type', 'identifier', ';'] [['type', 'identifier', ';']]
2. unmatched DECL eof eof ['DECL', 'ST']
Popped  ['DECL', 'ST']  with rule  ['DECL', 'ST']
Popped  (((  with rule  ['DECL', 'ST']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['DECL_ST']]
returned false  ['DECL', 'ST'] [['DECL', 'ST'], ['DECL']]
in rule  ['DECL']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['DECL_ST'], '(((', ['DECL']]
in symbol DECL 		(in rule  ['DECL'] )
in producer
in match rule with  DECL : [['type', 'identifier', ';']]
in rule  ['type', 'identifier', ';']  with  eof
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['DECL_ST'], '(((', ['DECL'], '(((', ['type', 'identifier', ';']]
in symbol type 		(in rule  ['type', 'identifier', ';'] )
is token
in match token eof eof type
4. unmatched token
Popped  ['type', 'identifier', ';']  with rule  ['type', 'identifier', ';']
Popped  (((  with rule  ['type', 'identifier', ';']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['DECL_ST'], '(((', ['DECL']]
returned false  ['type', 'identifier', ';'] [['type', 'identifier', ';']]
2. unmatched DECL eof eof ['DECL']
Popped  ['DECL']  with rule  ['DECL']
Popped  (((  with rule  ['DECL']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT'], '(((', ['DECL_ST']]
returned false  ['DECL'] [['DECL', 'ST'], ['DECL']]
2. unmatched DECL_ST eof eof ['DECL_ST']
Popped  ['DECL_ST']  with rule  ['DECL_ST']
Popped  (((  with rule  ['DECL_ST']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST'], '(((', ['STATEMENT']]
returned false  ['DECL_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
2. unmatched STATEMENT eof eof ['STATEMENT']
Popped  ['STATEMENT']  with rule  ['STATEMENT']
Popped  (((  with rule  ['STATEMENT']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))', '(((', ['STATEMENT_ST']]
returned false  ['STATEMENT'] [['STATEMENT', ';', 'ST'], ['STATEMENT']]
2. unmatched STATEMENT_ST eof eof ['STATEMENT_ST']
Popped  ['STATEMENT_ST']  with rule  ['STATEMENT_ST']
Popped  (((  with rule  ['STATEMENT_ST']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['type', 'identifier', ';'], ')))']
returned false  ['STATEMENT_ST'] [['STATEMENT_ST']]
2. unmatched ST eof eof ['DECL', 'ST']
Popped  )))  with rule  ['DECL', 'ST']
Popped  ['type', 'identifier', ';']  with rule  ['DECL', 'ST']
Popped  (((  with rule  ['DECL', 'ST']
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST']]
returned false  ['DECL', 'ST'] [['DECL', 'ST'], ['DECL']]
in rule  ['DECL']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['DECL']]
in symbol DECL 		(in rule  ['DECL'] )
in producer
in match rule with  DECL : [['type', 'identifier', ';']]
in rule  ['type', 'identifier', ';']  with  int
STACK  ['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['DECL'], '(((', ['type', 'identifier', ';']]
in symbol type 		(in rule  ['type', 'identifier', ';'] )
is token
in match token int type type
matched
2. temp store i i
in symbol identifier 		(in rule  ['type', 'identifier', ';'] )
is token
in match token i identifier identifier
matched
2. temp store ; ;
in symbol ; 		(in rule  ['type', 'identifier', ';'] )
else ; ;
matched
here we are ['type', 'identifier', ';'] [['type', 'identifier', ';']] 0
1.SYMBOL in RULE DECL ['DECL']
1. temp store int eof
here we are ['DECL'] [['DECL', 'ST'], ['DECL']] 1
1.SYMBOL in RULE DECL_ST ['DECL_ST']
1. temp store int eof
here we are ['DECL_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']] 3
1.SYMBOL in RULE STATEMENT ['STATEMENT', 'eof']
1. temp store eof eof
in symbol eof 		(in rule  ['STATEMENT', 'eof'] )
else eof eof
done!
here we are ['STATEMENT', 'eof'] [['STATEMENT', 'eof']] 0
WE ARE DONE int eof
STACK ----
['(((', 'PROG', '(((', ['STATEMENT', 'eof'], '(((', ['DECL_ST'], '(((', ['DECL', 'ST'], '(((', ['DECL'], '(((', ['type', 'identifier', ';'], ')))', ')))', ')))', ')))', ')))']
