('ASSIGN', [['identifier', '=', 'EXPRESSION', ';']])
('ASSIGN_ST', [['ASSIGN', 'ST'], ['ASSIGN']])
('COND', [['EXPRESSION1', 'relational_operator', 'EXPRESSION2', ';']])
('DECL', [['type', 'identifier', ';'], ['type', 'ID', ';']])
('DECL_ST', [['DECL', 'ST'], ['DECL']])
('DEFN', [['type', 'ASSIGN']])
('DEFN_ST', [['DEFN', 'ST'], ['DEFN']])
('E', [['T', "E'"]])
("E'", [['M', "E1'"], ['M', "E2'"]])
("E1'", [['+', 'T', "E'"], ['epsilon']])
("E2'", [['-', 'T', "E'"], ['epsilon']])
('EXPRESSION', [['E']])
('EXPRESSION1', [['EXPRESSION']])
('EXPRESSION2', [['EXPRESSION']])
('F', [['(', 'E', ')'], ['identifier'], ['number']])
('FOR_LOOP', [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']])
('FOR_LOOP_ST', [['FOR_LOOP', 'ST'], ['FOR_LOOP']])
('ID', [['identifier', "ID'"]])
("ID'", [[',', 'identifier', "ID'"], ['epsilon']])
('IF_COND', [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']])
('IF_COND_ST', [['IF_COND', 'ST'], ['IF_COND']])
('INCREMENT', [['I_ASSIGN'], ['I_COND'], ['EXPRESSION']])
('I_ASSIGN', [['identifier', '=', 'EXPRESSION']])
('I_COND', [['EXPRESSION1', 'relational_operator', 'EXPRESSION2']])
('M', [['epsilon']])
('OP_ELSE', [['else', '{', 'STATEMENT', '}']])
('PROG', [['STATEMENT', 'eof']])
('ST', [['STATEMENT_ST']])
('STATEMENT', [['FOR_LOOP_ST'], ['IF_COND_ST'], ['DEFN_ST'], ['ASSIGN_ST'], ['DECL_ST']])
('STATEMENT_ST', [['STATEMENT', ';', 'ST'], ['STATEMENT']])
('T', [['F', "T'"]])
("T'", [["T1'"], ["T2'"]])
("T1'", [['*', 'F', "T'"], ['epsilon']])
("T2'", [['/', 'F', "T'"], ['epsilon']])


[('i', 'identifier'), ('=', 'assignment_operator'), ('5', 'number'), ('+', 'arithmetic_operator'), ('4', 'number'), (';', 'punctuation')]




TREE
PROG 
in match rule with  PROG : [['STATEMENT', 'eof']]
in rule  ['STATEMENT', 'eof']  with  i
TREE
PROG [STATEMENT eof ] 
SYMBOL  STATEMENT
in symbol STATEMENT 		(in rule  ['STATEMENT', 'eof'] )
in producer
in match rule with  STATEMENT : [['FOR_LOOP_ST'], ['IF_COND_ST'], ['DEFN_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['FOR_LOOP_ST']  with  i
TREE
STATEMENT [FOR_LOOP_ST ] 
SYMBOL  FOR_LOOP_ST
in symbol FOR_LOOP_ST 		(in rule  ['FOR_LOOP_ST'] )
in producer
in match rule with  FOR_LOOP_ST : [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
in rule  ['FOR_LOOP', 'ST']  with  i
TREE
FOR_LOOP_ST [FOR_LOOP ST ] 
SYMBOL  FOR_LOOP
in symbol FOR_LOOP 		(in rule  ['FOR_LOOP', 'ST'] )
in producer
in match rule with  FOR_LOOP : [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with  i
TREE
FOR_LOOP [for ( ASSIGN COND INCREMENT ) { STATEMENT } ] 
SYMBOL  for
in symbol for 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else i for
5. unmatched for i
TREE
FOR_LOOP 
returned false  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
2. unmatched FOR_LOOP i i ['FOR_LOOP', 'ST']
TREE
FOR_LOOP_ST 
returned false  ['FOR_LOOP', 'ST'] [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
in rule  ['FOR_LOOP']  with  i
TREE
FOR_LOOP_ST [FOR_LOOP ] 
SYMBOL  FOR_LOOP
in symbol FOR_LOOP 		(in rule  ['FOR_LOOP'] )
in producer
in match rule with  FOR_LOOP : [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with  i
TREE
FOR_LOOP [for ( ASSIGN COND INCREMENT ) { STATEMENT } ] 
SYMBOL  for
in symbol for 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else i for
5. unmatched for i
TREE
FOR_LOOP 
returned false  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
2. unmatched FOR_LOOP i i ['FOR_LOOP']
TREE
FOR_LOOP_ST 
returned false  ['FOR_LOOP'] [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
2. unmatched FOR_LOOP_ST i i ['FOR_LOOP_ST']
TREE
STATEMENT 
returned false  ['FOR_LOOP_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['DEFN_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['IF_COND_ST']  with  i
TREE
STATEMENT [IF_COND_ST ] 
SYMBOL  IF_COND_ST
in symbol IF_COND_ST 		(in rule  ['IF_COND_ST'] )
in producer
in match rule with  IF_COND_ST : [['IF_COND', 'ST'], ['IF_COND']]
in rule  ['IF_COND', 'ST']  with  i
TREE
IF_COND_ST [IF_COND ST ] 
SYMBOL  IF_COND
in symbol IF_COND 		(in rule  ['IF_COND', 'ST'] )
in producer
in match rule with  IF_COND : [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with  i
TREE
IF_COND [if ( COND ) { STATEMENT ; } OP_ELSE ] 
SYMBOL  if
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] )
else i if
5. unmatched if i
TREE
IF_COND 
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with  i
TREE
IF_COND [if ( COND ) { STATEMENT } ] 
SYMBOL  if
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] )
else i if
5. unmatched if i
TREE
IF_COND 
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']]
2. unmatched IF_COND i i ['IF_COND', 'ST']
TREE
IF_COND_ST 
returned false  ['IF_COND', 'ST'] [['IF_COND', 'ST'], ['IF_COND']]
in rule  ['IF_COND']  with  i
TREE
IF_COND_ST [IF_COND ] 
SYMBOL  IF_COND
in symbol IF_COND 		(in rule  ['IF_COND'] )
in producer
in match rule with  IF_COND : [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with  i
TREE
IF_COND [if ( COND ) { STATEMENT ; } OP_ELSE ] 
SYMBOL  if
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] )
else i if
5. unmatched if i
TREE
IF_COND 
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with  i
TREE
IF_COND [if ( COND ) { STATEMENT } ] 
SYMBOL  if
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] )
else i if
5. unmatched if i
TREE
IF_COND 
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']]
2. unmatched IF_COND i i ['IF_COND']
TREE
IF_COND_ST 
returned false  ['IF_COND'] [['IF_COND', 'ST'], ['IF_COND']]
2. unmatched IF_COND_ST i i ['IF_COND_ST']
TREE
STATEMENT 
returned false  ['IF_COND_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['DEFN_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['DEFN_ST']  with  i
TREE
STATEMENT [DEFN_ST ] 
SYMBOL  DEFN_ST
in symbol DEFN_ST 		(in rule  ['DEFN_ST'] )
in producer
in match rule with  DEFN_ST : [['DEFN', 'ST'], ['DEFN']]
in rule  ['DEFN', 'ST']  with  i
TREE
DEFN_ST [DEFN ST ] 
SYMBOL  DEFN
in symbol DEFN 		(in rule  ['DEFN', 'ST'] )
in producer
in match rule with  DEFN : [['type', 'ASSIGN']]
in rule  ['type', 'ASSIGN']  with  i
TREE
DEFN [type ASSIGN ] 
SYMBOL  type
in symbol type 		(in rule  ['type', 'ASSIGN'] )
is token
in match token i identifier type
4. unmatched token
TREE
DEFN 
returned false  ['type', 'ASSIGN'] [['type', 'ASSIGN']]
2. unmatched DEFN i i ['DEFN', 'ST']
TREE
DEFN_ST 
returned false  ['DEFN', 'ST'] [['DEFN', 'ST'], ['DEFN']]
in rule  ['DEFN']  with  i
TREE
DEFN_ST [DEFN ] 
SYMBOL  DEFN
in symbol DEFN 		(in rule  ['DEFN'] )
in producer
in match rule with  DEFN : [['type', 'ASSIGN']]
in rule  ['type', 'ASSIGN']  with  i
TREE
DEFN [type ASSIGN ] 
SYMBOL  type
in symbol type 		(in rule  ['type', 'ASSIGN'] )
is token
in match token i identifier type
4. unmatched token
TREE
DEFN 
returned false  ['type', 'ASSIGN'] [['type', 'ASSIGN']]
2. unmatched DEFN i i ['DEFN']
TREE
DEFN_ST 
returned false  ['DEFN'] [['DEFN', 'ST'], ['DEFN']]
2. unmatched DEFN_ST i i ['DEFN_ST']
TREE
STATEMENT 
returned false  ['DEFN_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['DEFN_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['ASSIGN_ST']  with  i
TREE
STATEMENT [ASSIGN_ST ] 
SYMBOL  ASSIGN_ST
in symbol ASSIGN_ST 		(in rule  ['ASSIGN_ST'] )
in producer
in match rule with  ASSIGN_ST : [['ASSIGN', 'ST'], ['ASSIGN']]
in rule  ['ASSIGN', 'ST']  with  i
TREE
ASSIGN_ST [ASSIGN ST ] 
SYMBOL  ASSIGN
in symbol ASSIGN 		(in rule  ['ASSIGN', 'ST'] )
in producer
in match rule with  ASSIGN : [['identifier', '=', 'EXPRESSION', ';']]
in rule  ['identifier', '=', 'EXPRESSION', ';']  with  i
TREE
ASSIGN [identifier = EXPRESSION ; ] 
SYMBOL  identifier
in symbol identifier 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
is token
in match token i identifier identifier
TOKENSET  identifier i
2.SYMBOL in RULE identifier ['identifier', '=', 'EXPRESSION', ';'] ASSIGN
here2 in assign_producer_vals with  identifier ASSIGN ['identifier', '=', 'EXPRESSION', ';']
here3 in assign_producer_vals ['=', (0, 'type'), ('root', 'inhval')]
TP  [['=', (0, 'type'), ('root', 'inhval')]]
tuples [(0, 'type'), ('root', 'inhval')]
children  ['identifier', '=', 'EXPRESSION', ';']
x, x_attr 0 type
x, x_attr root inhval
PARAMS  identifier type ASSIGN inhval ['identifier', '=', 'EXPRESSION', ';']
setting = identifier type None under root  ASSIGN with rule  ['identifier', '=', 'EXPRESSION', ';']
matched
2. temp store = =
SYMBOL  =
in symbol = 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
else = =
matched
SYMBOL  EXPRESSION
in symbol EXPRESSION 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  5
TREE
EXPRESSION [E ] 
SYMBOL  E
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"]]
in rule  ['T', "E'"]  with  5
TREE
E [T E' ] 
SYMBOL  T
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"]]
in rule  ['F', "T'"]  with  5
TREE
T [F T' ] 
SYMBOL  F
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
TREE
F [( E ) ] 
SYMBOL  (
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
TREE
F 
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
TREE
F [identifier ] 
SYMBOL  identifier
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
TREE
F 
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
TREE
F [number ] 
SYMBOL  number
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
TOKENSET  number 5
2.SYMBOL in RULE number ['number'] F
here2 in assign_producer_vals with  number F ['number']
here3 in assign_producer_vals ['=', ('root', 'synval'), (0, 'lexval')]
TP  [['=', ('root', 'synval'), (0, 'lexval')]]
tuples [('root', 'synval'), (0, 'lexval')]
children  ['number']
x, x_attr root synval
x, x_attr 0 lexval
PARAMS  F synval number lexval ['number']
setting = F synval 5 under root  F with rule  ['number']
matched
2. temp store 5 +
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE F ['F', "T'"]
here2 in assign_producer_vals with  F T ['F', "T'"]
here3 in assign_producer_vals ['=', (1, 'inhval'), (0, 'val')]
TP  [['=', (1, 'inhval'), (0, 'val')]]
tuples [(1, 'inhval'), (0, 'val')]
children  ['F', "T'"]
x, x_attr 1 inhval
x, x_attr 0 val
PARAMS  T' inhval F val ['F', "T'"]
setting = T' inhval None under root  T with rule  ['F', "T'"]
1. temp store + +
SYMBOL  T'
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [["T1'"], ["T2'"]]
in rule  ["T1'"]  with  +
TREE
T' [T1' ] 
SYMBOL  T1'
in symbol T1' 		(in rule  ["T1'"] )
in producer
in match rule with  T1' : [['*', 'F', "T'"], ['epsilon']]
in rule  ['*', 'F', "T'"]  with  +
TREE
T1' [* F T' ] 
SYMBOL  *
in symbol * 		(in rule  ['*', 'F', "T'"] )
else + *
5. unmatched * +
TREE
T1' 
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['epsilon']]
in rule  ['epsilon']  with  +
TREE
T1' [epsilon ] 
SYMBOL  epsilon
in symbol epsilon 		(in rule  ['epsilon'] )
else + epsilon
here we are ['epsilon'] [['*', 'F', "T'"], ['epsilon']] 1
1.SYMBOL in RULE T1' ["T1'"]
here2 in assign_producer_vals with  T1' T' ["T1'"]
here3 in assign_producer_vals ['=', ('root', 'synval'), (0, 'synval')]
TP  [['=', ('root', 'synval'), (0, 'synval')]]
tuples [('root', 'synval'), (0, 'synval')]
children  ["T1'"]
x, x_attr root synval
x, x_attr 0 synval
PARAMS  T' synval T1' synval ["T1'"]
setting = T' synval None under root  T' with rule  ["T1'"]
1. temp store + +
here we are ["T1'"] [["T1'"], ["T2'"]] 0
1.SYMBOL in RULE T' ['F', "T'"]
here2 in assign_producer_vals with  T' T ['F', "T'"]
here3 in assign_producer_vals ['=', ('root', 'val'), (1, 'synval')]
TP  [['=', ('root', 'val'), (1, 'synval')]]
tuples [('root', 'val'), (1, 'synval')]
children  ['F', "T'"]
x, x_attr root val
x, x_attr 1 synval
PARAMS  T val T' synval ['F', "T'"]
setting = T val None under root  T with rule  ['F', "T'"]
1. temp store + +
here we are ['F', "T'"] [['F', "T'"]] 0
1.SYMBOL in RULE T ['T', "E'"]
here2 in assign_producer_vals with  T E ['T', "E'"]
here3 in assign_producer_vals ['=', (1, 'inhval'), (0, 'val')]
TP  [['=', (1, 'inhval'), (0, 'val')]]
tuples [(1, 'inhval'), (0, 'val')]
children  ['T', "E'"]
x, x_attr 1 inhval
x, x_attr 0 val
PARAMS  E' inhval T val ['T', "E'"]
setting = E' inhval None under root  E with rule  ['T', "E'"]
1. temp store + +
SYMBOL  E'
in symbol E' 		(in rule  ['T', "E'"] )
in producer
in match rule with  E' : [['M', "E1'"], ['M', "E2'"]]
in rule  ['M', "E1'"]  with  +
TREE
E' [M E1' ] 
SYMBOL  M
in symbol M 		(in rule  ['M', "E1'"] )
in producer
in match rule with  M : [['epsilon']]
in rule  ['epsilon']  with  +
TREE
M [epsilon ] 
SYMBOL  epsilon
in symbol epsilon 		(in rule  ['epsilon'] )
else + epsilon
here we are ['epsilon'] [['epsilon']] 0
1.SYMBOL in RULE M ['M', "E1'"]
here2 in assign_producer_vals with  M E' ['M', "E1'"]
here3 in assign_producer_vals ['=', (0, 'inhval'), ('root', 'inhval')]
TP  [['=', (0, 'inhval'), ('root', 'inhval')]]
tuples [(0, 'inhval'), ('root', 'inhval')]
children  ['M', "E1'"]
x, x_attr 0 inhval
x, x_attr root inhval
PARAMS  M inhval E' inhval ['M', "E1'"]
setting = M inhval None under root  E' with rule  ['M', "E1'"]
1. temp store + +
SYMBOL  E1'
in symbol E1' 		(in rule  ['M', "E1'"] )
in producer
in match rule with  E1' : [['+', 'T', "E'"], ['epsilon']]
in rule  ['+', 'T', "E'"]  with  +
TREE
E1' [+ T E' ] 
SYMBOL  +
in symbol + 		(in rule  ['+', 'T', "E'"] )
else + +
matched
SYMBOL  T
in symbol T 		(in rule  ['+', 'T', "E'"] )
in producer
in match rule with  T : [['F', "T'"]]
in rule  ['F', "T'"]  with  4
TREE
T [F T' ] 
SYMBOL  F
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  4
TREE
F [( E ) ] 
SYMBOL  (
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 4 (
5. unmatched ( 4
TREE
F 
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  4
TREE
F [identifier ] 
SYMBOL  identifier
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 4 number identifier
4. unmatched token
TREE
F 
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  4
TREE
F [number ] 
SYMBOL  number
in symbol number 		(in rule  ['number'] )
is token
in match token 4 number number
TOKENSET  number 4
2.SYMBOL in RULE number ['number'] F
here2 in assign_producer_vals with  number F ['number']
here3 in assign_producer_vals ['=', ('root', 'synval'), (0, 'lexval')]
TP  [['=', ('root', 'synval'), (0, 'lexval')]]
tuples [('root', 'synval'), (0, 'lexval')]
children  ['number']
x, x_attr root synval
x, x_attr 0 lexval
PARAMS  F synval number lexval ['number']
setting = F synval 4 under root  F with rule  ['number']
matched
2. temp store 4 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE F ['F', "T'"]
here2 in assign_producer_vals with  F T ['F', "T'"]
here3 in assign_producer_vals ['=', (1, 'inhval'), (0, 'val')]
TP  [['=', (1, 'inhval'), (0, 'val')]]
tuples [(1, 'inhval'), (0, 'val')]
children  ['F', "T'"]
x, x_attr 1 inhval
x, x_attr 0 val
PARAMS  T' inhval F val ['F', "T'"]
setting = T' inhval None under root  T with rule  ['F', "T'"]
1. temp store ; ;
SYMBOL  T'
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [["T1'"], ["T2'"]]
in rule  ["T1'"]  with  ;
TREE
T' [T1' ] 
SYMBOL  T1'
in symbol T1' 		(in rule  ["T1'"] )
in producer
in match rule with  T1' : [['*', 'F', "T'"], ['epsilon']]
in rule  ['*', 'F', "T'"]  with  ;
TREE
T1' [* F T' ] 
SYMBOL  *
in symbol * 		(in rule  ['*', 'F', "T'"] )
else ; *
5. unmatched * ;
TREE
T1' 
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['epsilon']]
in rule  ['epsilon']  with  ;
TREE
T1' [epsilon ] 
SYMBOL  epsilon
in symbol epsilon 		(in rule  ['epsilon'] )
else ; epsilon
here we are ['epsilon'] [['*', 'F', "T'"], ['epsilon']] 1
1.SYMBOL in RULE T1' ["T1'"]
here2 in assign_producer_vals with  T1' T' ["T1'"]
here3 in assign_producer_vals ['=', ('root', 'synval'), (0, 'synval')]
TP  [['=', ('root', 'synval'), (0, 'synval')]]
tuples [('root', 'synval'), (0, 'synval')]
children  ["T1'"]
x, x_attr root synval
x, x_attr 0 synval
PARAMS  T' synval T1' synval ["T1'"]
setting = T' synval None under root  T' with rule  ["T1'"]
1. temp store ; ;
here we are ["T1'"] [["T1'"], ["T2'"]] 0
1.SYMBOL in RULE T' ['F', "T'"]
here2 in assign_producer_vals with  T' T ['F', "T'"]
here3 in assign_producer_vals ['=', ('root', 'val'), (1, 'synval')]
TP  [['=', ('root', 'val'), (1, 'synval')]]
tuples [('root', 'val'), (1, 'synval')]
children  ['F', "T'"]
x, x_attr root val
x, x_attr 1 synval
PARAMS  T val T' synval ['F', "T'"]
setting = T val None under root  T with rule  ['F', "T'"]
1. temp store ; ;
here we are ['F', "T'"] [['F', "T'"]] 0
1.SYMBOL in RULE T ['+', 'T', "E'"]
here2 in assign_producer_vals with  T E1' ['+', 'T', "E'"]
here3 in assign_producer_vals ['+=', (2, 'inhval'), ('root', 'inhval'), (1, 'inhval')]
TP  [['+=', (2, 'inhval'), ('root', 'inhval'), (1, 'inhval')]]
tuples [(2, 'inhval'), ('root', 'inhval'), (1, 'inhval')]
children  ['+', 'T', "E'"]
x, x_attr 2 inhval
x, x_attr root inhval
x, x_attr 1 inhval
TP  [['+=', (2, 'inhval'), ('root', 'inhval'), (1, 'inhval')]]
tuples [(2, 'inhval'), ('root', 'inhval'), (1, 'inhval')]
children  ['+', 'T', "E'"]
x, x_attr 2 inhval
x, x_attr root inhval
x, x_attr 1 inhval
PARAMS  [<classes.Tree object at 0x7f29b61f8898>, 'inhval', <classes.Tree object at 0x7f29b61f8668>, 'inhval', <classes.Tree object at 0x7f29b61f8860>, 'inhval']
