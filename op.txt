('ASSIGN', [['identifier', '=', 'EXPRESSION', ';']])
('ASSIGN_ST', [['ASSIGN', 'ST'], ['ASSIGN']])
('COND', [['EXPRESSION1', 'relational_operator', 'EXPRESSION2', ';']])
('DECL', [['type', 'identifier', ';']])
('DECL_ST', [['DECL', 'ST'], ['DECL']])
('DEFN', [['type', 'ASSIGN']])
('DEFN_ST', [['DEFN', 'ST'], ['DEFN']])
('E', [['T', "E'"], ['T']])
("E'", [['+', 'T', "E'"], ['-', 'T', "E'"]])
('EXPRESSION', [['E']])
('EXPRESSION1', [['EXPRESSION']])
('EXPRESSION2', [['EXPRESSION']])
('F', [['^', 'G', 'F'], ['G']])
('FOR_LOOP', [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']])
('FOR_LOOP_ST', [['FOR_LOOP', 'ST'], ['FOR_LOOP']])
('G', [['(', 'E', ')'], ['identifier'], ['number']])
('IF_COND', [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']])
('IF_COND_ST', [['IF_COND', 'ST'], ['IF_COND']])
('INCREMENT', [['I_ASSIGN'], ['I_COND'], ['EXPRESSION']])
('I_ASSIGN', [['identifier', '=', 'EXPRESSION']])
('I_COND', [['EXPRESSION1', 'relational_operator', 'EXPRESSION2']])
('OP_ELSE', [['else', '{', 'STATEMENT', '}']])
('PROG', [['STATEMENT', 'eof']])
('ST', [['STATEMENT_ST']])
('STATEMENT', [['FOR_LOOP_ST'], ['IF_COND_ST'], ['DEFN_ST'], ['ASSIGN_ST'], ['DECL_ST']])
('STATEMENT_ST', [['STATEMENT', ';', 'ST'], ['STATEMENT']])
('T', [['F', "T'"], ['F']])
("T'", [['*', 'F', "T'"], ['/', 'F', "T'"]])


[('l', 'identifier'), ('=', 'assignment_operator'), ('x', 'identifier'), ('*', 'arithmetic_operator'), ('5', 'number'), (';', 'punctuation')]




TREE
PROG 
in match rule with  PROG : [['STATEMENT', 'eof']]
in rule  ['STATEMENT', 'eof']  with  l
TREE
PROG [STATEMENT eof ] 
SYMBOL  STATEMENT
in symbol STATEMENT 		(in rule  ['STATEMENT', 'eof'] )
in producer
in match rule with  STATEMENT : [['FOR_LOOP_ST'], ['IF_COND_ST'], ['DEFN_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['FOR_LOOP_ST']  with  l
TREE
STATEMENT [FOR_LOOP_ST ] 
SYMBOL  FOR_LOOP_ST
in symbol FOR_LOOP_ST 		(in rule  ['FOR_LOOP_ST'] )
in producer
in match rule with  FOR_LOOP_ST : [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
in rule  ['FOR_LOOP', 'ST']  with  l
TREE
FOR_LOOP_ST [FOR_LOOP ST ] 
SYMBOL  FOR_LOOP
in symbol FOR_LOOP 		(in rule  ['FOR_LOOP', 'ST'] )
in producer
in match rule with  FOR_LOOP : [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with  l
TREE
FOR_LOOP [for ( ASSIGN COND INCREMENT ) { STATEMENT } ] 
SYMBOL  for
in symbol for 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else l for
5. unmatched for l
TREE
FOR_LOOP 
returned false  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
2. unmatched FOR_LOOP l l ['FOR_LOOP', 'ST']
TREE
FOR_LOOP_ST 
returned false  ['FOR_LOOP', 'ST'] [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
in rule  ['FOR_LOOP']  with  l
TREE
FOR_LOOP_ST [FOR_LOOP ] 
SYMBOL  FOR_LOOP
in symbol FOR_LOOP 		(in rule  ['FOR_LOOP'] )
in producer
in match rule with  FOR_LOOP : [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with  l
TREE
FOR_LOOP [for ( ASSIGN COND INCREMENT ) { STATEMENT } ] 
SYMBOL  for
in symbol for 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else l for
5. unmatched for l
TREE
FOR_LOOP 
returned false  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
2. unmatched FOR_LOOP l l ['FOR_LOOP']
TREE
FOR_LOOP_ST 
returned false  ['FOR_LOOP'] [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
2. unmatched FOR_LOOP_ST l l ['FOR_LOOP_ST']
TREE
STATEMENT 
returned false  ['FOR_LOOP_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['DEFN_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['IF_COND_ST']  with  l
TREE
STATEMENT [IF_COND_ST ] 
SYMBOL  IF_COND_ST
in symbol IF_COND_ST 		(in rule  ['IF_COND_ST'] )
in producer
in match rule with  IF_COND_ST : [['IF_COND', 'ST'], ['IF_COND']]
in rule  ['IF_COND', 'ST']  with  l
TREE
IF_COND_ST [IF_COND ST ] 
SYMBOL  IF_COND
in symbol IF_COND 		(in rule  ['IF_COND', 'ST'] )
in producer
in match rule with  IF_COND : [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with  l
TREE
IF_COND [if ( COND ) { STATEMENT ; } OP_ELSE ] 
SYMBOL  if
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] )
else l if
5. unmatched if l
TREE
IF_COND 
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with  l
TREE
IF_COND [if ( COND ) { STATEMENT } ] 
SYMBOL  if
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] )
else l if
5. unmatched if l
TREE
IF_COND 
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']]
2. unmatched IF_COND l l ['IF_COND', 'ST']
TREE
IF_COND_ST 
returned false  ['IF_COND', 'ST'] [['IF_COND', 'ST'], ['IF_COND']]
in rule  ['IF_COND']  with  l
TREE
IF_COND_ST [IF_COND ] 
SYMBOL  IF_COND
in symbol IF_COND 		(in rule  ['IF_COND'] )
in producer
in match rule with  IF_COND : [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with  l
TREE
IF_COND [if ( COND ) { STATEMENT ; } OP_ELSE ] 
SYMBOL  if
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] )
else l if
5. unmatched if l
TREE
IF_COND 
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with  l
TREE
IF_COND [if ( COND ) { STATEMENT } ] 
SYMBOL  if
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] )
else l if
5. unmatched if l
TREE
IF_COND 
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']]
2. unmatched IF_COND l l ['IF_COND']
TREE
IF_COND_ST 
returned false  ['IF_COND'] [['IF_COND', 'ST'], ['IF_COND']]
2. unmatched IF_COND_ST l l ['IF_COND_ST']
TREE
STATEMENT 
returned false  ['IF_COND_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['DEFN_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['DEFN_ST']  with  l
TREE
STATEMENT [DEFN_ST ] 
SYMBOL  DEFN_ST
in symbol DEFN_ST 		(in rule  ['DEFN_ST'] )
in producer
in match rule with  DEFN_ST : [['DEFN', 'ST'], ['DEFN']]
in rule  ['DEFN', 'ST']  with  l
TREE
DEFN_ST [DEFN ST ] 
SYMBOL  DEFN
in symbol DEFN 		(in rule  ['DEFN', 'ST'] )
in producer
in match rule with  DEFN : [['type', 'ASSIGN']]
in rule  ['type', 'ASSIGN']  with  l
TREE
DEFN [type ASSIGN ] 
SYMBOL  type
in symbol type 		(in rule  ['type', 'ASSIGN'] )
is token
in match token l identifier type
4. unmatched token
TREE
DEFN 
returned false  ['type', 'ASSIGN'] [['type', 'ASSIGN']]
2. unmatched DEFN l l ['DEFN', 'ST']
TREE
DEFN_ST 
returned false  ['DEFN', 'ST'] [['DEFN', 'ST'], ['DEFN']]
in rule  ['DEFN']  with  l
TREE
DEFN_ST [DEFN ] 
SYMBOL  DEFN
in symbol DEFN 		(in rule  ['DEFN'] )
in producer
in match rule with  DEFN : [['type', 'ASSIGN']]
in rule  ['type', 'ASSIGN']  with  l
TREE
DEFN [type ASSIGN ] 
SYMBOL  type
in symbol type 		(in rule  ['type', 'ASSIGN'] )
is token
in match token l identifier type
4. unmatched token
TREE
DEFN 
returned false  ['type', 'ASSIGN'] [['type', 'ASSIGN']]
2. unmatched DEFN l l ['DEFN']
TREE
DEFN_ST 
returned false  ['DEFN'] [['DEFN', 'ST'], ['DEFN']]
2. unmatched DEFN_ST l l ['DEFN_ST']
TREE
STATEMENT 
returned false  ['DEFN_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['DEFN_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['ASSIGN_ST']  with  l
TREE
STATEMENT [ASSIGN_ST ] 
SYMBOL  ASSIGN_ST
in symbol ASSIGN_ST 		(in rule  ['ASSIGN_ST'] )
in producer
in match rule with  ASSIGN_ST : [['ASSIGN', 'ST'], ['ASSIGN']]
in rule  ['ASSIGN', 'ST']  with  l
TREE
ASSIGN_ST [ASSIGN ST ] 
SYMBOL  ASSIGN
in symbol ASSIGN 		(in rule  ['ASSIGN', 'ST'] )
in producer
in match rule with  ASSIGN : [['identifier', '=', 'EXPRESSION', ';']]
in rule  ['identifier', '=', 'EXPRESSION', ';']  with  l
TREE
ASSIGN [identifier = EXPRESSION ; ] 
SYMBOL  identifier
in symbol identifier 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
is token
in match token l identifier identifier
2.SYMBOL in RULE identifier ['identifier', '=', 'EXPRESSION', ';']
matched
2. temp store = =
SYMBOL  =
in symbol = 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
else = =
matched
SYMBOL  EXPRESSION
in symbol EXPRESSION 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  x
TREE
EXPRESSION [E ] 
SYMBOL  E
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  x
TREE
E [T E' ] 
SYMBOL  T
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  x
TREE
T [F T' ] 
SYMBOL  F
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['^', 'G', 'F'], ['G']]
in rule  ['^', 'G', 'F']  with  x
TREE
F [^ G F ] 
SYMBOL  ^
in symbol ^ 		(in rule  ['^', 'G', 'F'] )
else x ^
5. unmatched ^ x
TREE
F 
returned false  ['^', 'G', 'F'] [['^', 'G', 'F'], ['G']]
in rule  ['G']  with  x
TREE
F [G ] 
SYMBOL  G
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  x
TREE
G [( E ) ] 
SYMBOL  (
in symbol ( 		(in rule  ['(', 'E', ')'] )
else x (
5. unmatched ( x
TREE
G 
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  x
TREE
G [identifier ] 
SYMBOL  identifier
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token x identifier identifier
2.SYMBOL in RULE identifier ['identifier']
matched
2. temp store x *
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G']
1. temp store x *
here we are ['G'] [['^', 'G', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store * *
SYMBOL  T'
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  *
TREE
T' [* F T' ] 
SYMBOL  *
in symbol * 		(in rule  ['*', 'F', "T'"] )
else * *
matched
SYMBOL  F
in symbol F 		(in rule  ['*', 'F', "T'"] )
in producer
in match rule with  F : [['^', 'G', 'F'], ['G']]
in rule  ['^', 'G', 'F']  with  5
TREE
F [^ G F ] 
SYMBOL  ^
in symbol ^ 		(in rule  ['^', 'G', 'F'] )
else 5 ^
5. unmatched ^ 5
TREE
F 
returned false  ['^', 'G', 'F'] [['^', 'G', 'F'], ['G']]
in rule  ['G']  with  5
TREE
F [G ] 
SYMBOL  G
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
TREE
G [( E ) ] 
SYMBOL  (
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
TREE
G 
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
TREE
G [identifier ] 
SYMBOL  identifier
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
TREE
G 
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
TREE
G [number ] 
SYMBOL  number
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
2.SYMBOL in RULE number ['number']
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 5 ;
here we are ['G'] [['^', 'G', 'F'], ['G']] 1
1.SYMBOL in RULE F ['*', 'F', "T'"]
1. temp store ; ;
SYMBOL  T'
in symbol T' 		(in rule  ['*', 'F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  ;
TREE
T' [* F T' ] 
SYMBOL  *
in symbol * 		(in rule  ['*', 'F', "T'"] )
else ; *
5. unmatched * ;
TREE
T' 
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  ;
TREE
T' [/ F T' ] 
SYMBOL  /
in symbol / 		(in rule  ['/', 'F', "T'"] )
else ; /
5. unmatched / ;
TREE
T' 
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' ; ; ['*', 'F', "T'"]
TREE
T' 
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  *
TREE
T' [/ F T' ] 
SYMBOL  /
in symbol / 		(in rule  ['/', 'F', "T'"] )
else * /
5. unmatched / *
TREE
T' 
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' * ; ['F', "T'"]
TREE
T 
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  x
TREE
T [F ] 
SYMBOL  F
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['^', 'G', 'F'], ['G']]
in rule  ['^', 'G', 'F']  with  x
TREE
F [^ G F ] 
SYMBOL  ^
in symbol ^ 		(in rule  ['^', 'G', 'F'] )
else x ^
5. unmatched ^ x
TREE
F 
returned false  ['^', 'G', 'F'] [['^', 'G', 'F'], ['G']]
in rule  ['G']  with  x
TREE
F [G ] 
SYMBOL  G
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  x
TREE
G [( E ) ] 
SYMBOL  (
in symbol ( 		(in rule  ['(', 'E', ')'] )
else x (
5. unmatched ( x
TREE
G 
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  x
TREE
G [identifier ] 
SYMBOL  identifier
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token x identifier identifier
2.SYMBOL in RULE identifier ['identifier']
matched
2. temp store x *
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G']
1. temp store x *
here we are ['G'] [['^', 'G', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store x *
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T', "E'"]
1. temp store * *
SYMBOL  E'
in symbol E' 		(in rule  ['T', "E'"] )
in producer
in match rule with  E' : [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['+', 'T', "E'"]  with  *
TREE
E' [+ T E' ] 
SYMBOL  +
in symbol + 		(in rule  ['+', 'T', "E'"] )
else * +
5. unmatched + *
TREE
E' 
returned false  ['+', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['-', 'T', "E'"]  with  *
TREE
E' [- T E' ] 
SYMBOL  -
in symbol - 		(in rule  ['-', 'T', "E'"] )
else * -
5. unmatched - *
TREE
E' 
returned false  ['-', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
2. unmatched E' * * ['T', "E'"]
TREE
E 
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  x
TREE
E [T ] 
SYMBOL  T
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  x
TREE
T [F T' ] 
SYMBOL  F
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['^', 'G', 'F'], ['G']]
in rule  ['^', 'G', 'F']  with  x
TREE
F [^ G F ] 
SYMBOL  ^
in symbol ^ 		(in rule  ['^', 'G', 'F'] )
else x ^
5. unmatched ^ x
TREE
F 
returned false  ['^', 'G', 'F'] [['^', 'G', 'F'], ['G']]
in rule  ['G']  with  x
TREE
F [G ] 
SYMBOL  G
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  x
TREE
G [( E ) ] 
SYMBOL  (
in symbol ( 		(in rule  ['(', 'E', ')'] )
else x (
5. unmatched ( x
TREE
G 
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  x
TREE
G [identifier ] 
SYMBOL  identifier
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token x identifier identifier
2.SYMBOL in RULE identifier ['identifier']
matched
2. temp store x *
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G']
1. temp store x *
here we are ['G'] [['^', 'G', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store * *
SYMBOL  T'
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  *
TREE
T' [* F T' ] 
SYMBOL  *
in symbol * 		(in rule  ['*', 'F', "T'"] )
else * *
matched
SYMBOL  F
in symbol F 		(in rule  ['*', 'F', "T'"] )
in producer
in match rule with  F : [['^', 'G', 'F'], ['G']]
in rule  ['^', 'G', 'F']  with  5
TREE
F [^ G F ] 
SYMBOL  ^
in symbol ^ 		(in rule  ['^', 'G', 'F'] )
else 5 ^
5. unmatched ^ 5
TREE
F 
returned false  ['^', 'G', 'F'] [['^', 'G', 'F'], ['G']]
in rule  ['G']  with  5
TREE
F [G ] 
SYMBOL  G
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
TREE
G [( E ) ] 
SYMBOL  (
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
TREE
G 
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
TREE
G [identifier ] 
SYMBOL  identifier
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
TREE
G 
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
TREE
G [number ] 
SYMBOL  number
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
2.SYMBOL in RULE number ['number']
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 5 ;
here we are ['G'] [['^', 'G', 'F'], ['G']] 1
1.SYMBOL in RULE F ['*', 'F', "T'"]
1. temp store ; ;
SYMBOL  T'
in symbol T' 		(in rule  ['*', 'F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  ;
TREE
T' [* F T' ] 
SYMBOL  *
in symbol * 		(in rule  ['*', 'F', "T'"] )
else ; *
5. unmatched * ;
TREE
T' 
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  ;
TREE
T' [/ F T' ] 
SYMBOL  /
in symbol / 		(in rule  ['/', 'F', "T'"] )
else ; /
5. unmatched / ;
TREE
T' 
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' ; ; ['*', 'F', "T'"]
TREE
T' 
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  *
TREE
T' [/ F T' ] 
SYMBOL  /
in symbol / 		(in rule  ['/', 'F', "T'"] )
else * /
5. unmatched / *
TREE
T' 
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' * ; ['F', "T'"]
TREE
T 
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  x
TREE
T [F ] 
SYMBOL  F
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['^', 'G', 'F'], ['G']]
in rule  ['^', 'G', 'F']  with  x
TREE
F [^ G F ] 
SYMBOL  ^
in symbol ^ 		(in rule  ['^', 'G', 'F'] )
else x ^
5. unmatched ^ x
TREE
F 
returned false  ['^', 'G', 'F'] [['^', 'G', 'F'], ['G']]
in rule  ['G']  with  x
TREE
F [G ] 
SYMBOL  G
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  x
TREE
G [( E ) ] 
SYMBOL  (
in symbol ( 		(in rule  ['(', 'E', ')'] )
else x (
5. unmatched ( x
TREE
G 
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  x
TREE
G [identifier ] 
SYMBOL  identifier
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token x identifier identifier
2.SYMBOL in RULE identifier ['identifier']
matched
2. temp store x *
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G']
1. temp store x *
here we are ['G'] [['^', 'G', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store x *
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T']
1. temp store x *
here we are ['T'] [['T', "E'"], ['T']] 1
1.SYMBOL in RULE E ['E']
1. temp store x *
here we are ['E'] [['E']] 0
1.SYMBOL in RULE EXPRESSION ['identifier', '=', 'EXPRESSION', ';']
1. temp store * *
SYMBOL  ;
in symbol ; 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
else * ;
5. unmatched ; *
TREE
ASSIGN 
returned false  ['identifier', '=', 'EXPRESSION', ';'] [['identifier', '=', 'EXPRESSION', ';']]
2. unmatched ASSIGN l * ['ASSIGN', 'ST']
TREE
ASSIGN_ST 
returned false  ['ASSIGN', 'ST'] [['ASSIGN', 'ST'], ['ASSIGN']]
in rule  ['ASSIGN']  with  l
TREE
ASSIGN_ST [ASSIGN ] 
SYMBOL  ASSIGN
in symbol ASSIGN 		(in rule  ['ASSIGN'] )
in producer
in match rule with  ASSIGN : [['identifier', '=', 'EXPRESSION', ';']]
in rule  ['identifier', '=', 'EXPRESSION', ';']  with  l
TREE
ASSIGN [identifier = EXPRESSION ; ] 
SYMBOL  identifier
in symbol identifier 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
is token
in match token l identifier identifier
2.SYMBOL in RULE identifier ['identifier', '=', 'EXPRESSION', ';']
matched
2. temp store = =
SYMBOL  =
in symbol = 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
else = =
matched
SYMBOL  EXPRESSION
in symbol EXPRESSION 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  x
TREE
EXPRESSION [E ] 
SYMBOL  E
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  x
TREE
E [T E' ] 
SYMBOL  T
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  x
TREE
T [F T' ] 
SYMBOL  F
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['^', 'G', 'F'], ['G']]
in rule  ['^', 'G', 'F']  with  x
TREE
F [^ G F ] 
SYMBOL  ^
in symbol ^ 		(in rule  ['^', 'G', 'F'] )
else x ^
5. unmatched ^ x
TREE
F 
returned false  ['^', 'G', 'F'] [['^', 'G', 'F'], ['G']]
in rule  ['G']  with  x
TREE
F [G ] 
SYMBOL  G
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  x
TREE
G [( E ) ] 
SYMBOL  (
in symbol ( 		(in rule  ['(', 'E', ')'] )
else x (
5. unmatched ( x
TREE
G 
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  x
TREE
G [identifier ] 
SYMBOL  identifier
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token x identifier identifier
2.SYMBOL in RULE identifier ['identifier']
matched
2. temp store x *
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G']
1. temp store x *
here we are ['G'] [['^', 'G', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store * *
SYMBOL  T'
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  *
TREE
T' [* F T' ] 
SYMBOL  *
in symbol * 		(in rule  ['*', 'F', "T'"] )
else * *
matched
SYMBOL  F
in symbol F 		(in rule  ['*', 'F', "T'"] )
in producer
in match rule with  F : [['^', 'G', 'F'], ['G']]
in rule  ['^', 'G', 'F']  with  5
TREE
F [^ G F ] 
SYMBOL  ^
in symbol ^ 		(in rule  ['^', 'G', 'F'] )
else 5 ^
5. unmatched ^ 5
TREE
F 
returned false  ['^', 'G', 'F'] [['^', 'G', 'F'], ['G']]
in rule  ['G']  with  5
TREE
F [G ] 
SYMBOL  G
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
TREE
G [( E ) ] 
SYMBOL  (
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
TREE
G 
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
TREE
G [identifier ] 
SYMBOL  identifier
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
TREE
G 
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
TREE
G [number ] 
SYMBOL  number
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
2.SYMBOL in RULE number ['number']
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 5 ;
here we are ['G'] [['^', 'G', 'F'], ['G']] 1
1.SYMBOL in RULE F ['*', 'F', "T'"]
1. temp store ; ;
SYMBOL  T'
in symbol T' 		(in rule  ['*', 'F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  ;
TREE
T' [* F T' ] 
SYMBOL  *
in symbol * 		(in rule  ['*', 'F', "T'"] )
else ; *
5. unmatched * ;
TREE
T' 
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  ;
TREE
T' [/ F T' ] 
SYMBOL  /
in symbol / 		(in rule  ['/', 'F', "T'"] )
else ; /
5. unmatched / ;
TREE
T' 
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' ; ; ['*', 'F', "T'"]
TREE
T' 
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  *
TREE
T' [/ F T' ] 
SYMBOL  /
in symbol / 		(in rule  ['/', 'F', "T'"] )
else * /
5. unmatched / *
TREE
T' 
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' * ; ['F', "T'"]
TREE
T 
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  x
TREE
T [F ] 
SYMBOL  F
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['^', 'G', 'F'], ['G']]
in rule  ['^', 'G', 'F']  with  x
TREE
F [^ G F ] 
SYMBOL  ^
in symbol ^ 		(in rule  ['^', 'G', 'F'] )
else x ^
5. unmatched ^ x
TREE
F 
returned false  ['^', 'G', 'F'] [['^', 'G', 'F'], ['G']]
in rule  ['G']  with  x
TREE
F [G ] 
SYMBOL  G
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  x
TREE
G [( E ) ] 
SYMBOL  (
in symbol ( 		(in rule  ['(', 'E', ')'] )
else x (
5. unmatched ( x
TREE
G 
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  x
TREE
G [identifier ] 
SYMBOL  identifier
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token x identifier identifier
2.SYMBOL in RULE identifier ['identifier']
matched
2. temp store x *
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G']
1. temp store x *
here we are ['G'] [['^', 'G', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store x *
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T', "E'"]
1. temp store * *
SYMBOL  E'
in symbol E' 		(in rule  ['T', "E'"] )
in producer
in match rule with  E' : [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['+', 'T', "E'"]  with  *
TREE
E' [+ T E' ] 
SYMBOL  +
in symbol + 		(in rule  ['+', 'T', "E'"] )
else * +
5. unmatched + *
TREE
E' 
returned false  ['+', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['-', 'T', "E'"]  with  *
TREE
E' [- T E' ] 
SYMBOL  -
in symbol - 		(in rule  ['-', 'T', "E'"] )
else * -
5. unmatched - *
TREE
E' 
returned false  ['-', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
2. unmatched E' * * ['T', "E'"]
TREE
E 
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  x
TREE
E [T ] 
SYMBOL  T
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  x
TREE
T [F T' ] 
SYMBOL  F
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['^', 'G', 'F'], ['G']]
in rule  ['^', 'G', 'F']  with  x
TREE
F [^ G F ] 
SYMBOL  ^
in symbol ^ 		(in rule  ['^', 'G', 'F'] )
else x ^
5. unmatched ^ x
TREE
F 
returned false  ['^', 'G', 'F'] [['^', 'G', 'F'], ['G']]
in rule  ['G']  with  x
TREE
F [G ] 
SYMBOL  G
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  x
TREE
G [( E ) ] 
SYMBOL  (
in symbol ( 		(in rule  ['(', 'E', ')'] )
else x (
5. unmatched ( x
TREE
G 
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  x
TREE
G [identifier ] 
SYMBOL  identifier
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token x identifier identifier
2.SYMBOL in RULE identifier ['identifier']
matched
2. temp store x *
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G']
1. temp store x *
here we are ['G'] [['^', 'G', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store * *
SYMBOL  T'
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  *
TREE
T' [* F T' ] 
SYMBOL  *
in symbol * 		(in rule  ['*', 'F', "T'"] )
else * *
matched
SYMBOL  F
in symbol F 		(in rule  ['*', 'F', "T'"] )
in producer
in match rule with  F : [['^', 'G', 'F'], ['G']]
in rule  ['^', 'G', 'F']  with  5
TREE
F [^ G F ] 
SYMBOL  ^
in symbol ^ 		(in rule  ['^', 'G', 'F'] )
else 5 ^
5. unmatched ^ 5
TREE
F 
returned false  ['^', 'G', 'F'] [['^', 'G', 'F'], ['G']]
in rule  ['G']  with  5
TREE
F [G ] 
SYMBOL  G
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
TREE
G [( E ) ] 
SYMBOL  (
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
TREE
G 
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
TREE
G [identifier ] 
SYMBOL  identifier
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
TREE
G 
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
TREE
G [number ] 
SYMBOL  number
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
2.SYMBOL in RULE number ['number']
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 5 ;
here we are ['G'] [['^', 'G', 'F'], ['G']] 1
1.SYMBOL in RULE F ['*', 'F', "T'"]
1. temp store ; ;
SYMBOL  T'
in symbol T' 		(in rule  ['*', 'F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  ;
TREE
T' [* F T' ] 
SYMBOL  *
in symbol * 		(in rule  ['*', 'F', "T'"] )
else ; *
5. unmatched * ;
TREE
T' 
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  ;
TREE
T' [/ F T' ] 
SYMBOL  /
in symbol / 		(in rule  ['/', 'F', "T'"] )
else ; /
5. unmatched / ;
TREE
T' 
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' ; ; ['*', 'F', "T'"]
TREE
T' 
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  *
TREE
T' [/ F T' ] 
SYMBOL  /
in symbol / 		(in rule  ['/', 'F', "T'"] )
else * /
5. unmatched / *
TREE
T' 
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' * ; ['F', "T'"]
TREE
T 
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  x
TREE
T [F ] 
SYMBOL  F
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['^', 'G', 'F'], ['G']]
in rule  ['^', 'G', 'F']  with  x
TREE
F [^ G F ] 
SYMBOL  ^
in symbol ^ 		(in rule  ['^', 'G', 'F'] )
else x ^
5. unmatched ^ x
TREE
F 
returned false  ['^', 'G', 'F'] [['^', 'G', 'F'], ['G']]
in rule  ['G']  with  x
TREE
F [G ] 
SYMBOL  G
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  x
TREE
G [( E ) ] 
SYMBOL  (
in symbol ( 		(in rule  ['(', 'E', ')'] )
else x (
5. unmatched ( x
TREE
G 
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  x
TREE
G [identifier ] 
SYMBOL  identifier
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token x identifier identifier
2.SYMBOL in RULE identifier ['identifier']
matched
2. temp store x *
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G']
1. temp store x *
here we are ['G'] [['^', 'G', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store x *
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T']
1. temp store x *
here we are ['T'] [['T', "E'"], ['T']] 1
1.SYMBOL in RULE E ['E']
1. temp store x *
here we are ['E'] [['E']] 0
1.SYMBOL in RULE EXPRESSION ['identifier', '=', 'EXPRESSION', ';']
1. temp store * *
SYMBOL  ;
in symbol ; 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
else * ;
5. unmatched ; *
TREE
ASSIGN 
returned false  ['identifier', '=', 'EXPRESSION', ';'] [['identifier', '=', 'EXPRESSION', ';']]
2. unmatched ASSIGN l * ['ASSIGN']
TREE
ASSIGN_ST 
returned false  ['ASSIGN'] [['ASSIGN', 'ST'], ['ASSIGN']]
2. unmatched ASSIGN_ST l * ['ASSIGN_ST']
TREE
STATEMENT 
returned false  ['ASSIGN_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['DEFN_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['DECL_ST']  with  l
TREE
STATEMENT [DECL_ST ] 
SYMBOL  DECL_ST
in symbol DECL_ST 		(in rule  ['DECL_ST'] )
in producer
in match rule with  DECL_ST : [['DECL', 'ST'], ['DECL']]
in rule  ['DECL', 'ST']  with  l
TREE
DECL_ST [DECL ST ] 
SYMBOL  DECL
in symbol DECL 		(in rule  ['DECL', 'ST'] )
in producer
in match rule with  DECL : [['type', 'identifier', ';']]
in rule  ['type', 'identifier', ';']  with  l
TREE
DECL [type identifier ; ] 
SYMBOL  type
in symbol type 		(in rule  ['type', 'identifier', ';'] )
is token
in match token l identifier type
4. unmatched token
TREE
DECL 
returned false  ['type', 'identifier', ';'] [['type', 'identifier', ';']]
2. unmatched DECL l * ['DECL', 'ST']
TREE
DECL_ST 
returned false  ['DECL', 'ST'] [['DECL', 'ST'], ['DECL']]
in rule  ['DECL']  with  l
TREE
DECL_ST [DECL ] 
SYMBOL  DECL
in symbol DECL 		(in rule  ['DECL'] )
in producer
in match rule with  DECL : [['type', 'identifier', ';']]
in rule  ['type', 'identifier', ';']  with  l
TREE
DECL [type identifier ; ] 
SYMBOL  type
in symbol type 		(in rule  ['type', 'identifier', ';'] )
is token
in match token l identifier type
4. unmatched token
TREE
DECL 
returned false  ['type', 'identifier', ';'] [['type', 'identifier', ';']]
2. unmatched DECL l * ['DECL']
TREE
DECL_ST 
returned false  ['DECL'] [['DECL', 'ST'], ['DECL']]
2. unmatched DECL_ST l * ['DECL_ST']
TREE
STATEMENT 
returned false  ['DECL_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['DEFN_ST'], ['ASSIGN_ST'], ['DECL_ST']]
2. unmatched STATEMENT l * ['STATEMENT', 'eof']
TREE
PROG 
returned false  ['STATEMENT', 'eof'] [['STATEMENT', 'eof']]
ERROR l *
TREE
PROG 
