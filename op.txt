('ASSIGN', [['identifier', '=', 'EXPRESSION', ';']])
('ASSIGN_ST', [['ASSIGN', 'ST'], ['ASSIGN']])
('COND', [['EXPRESSION1', 'relational_operator', 'EXPRESSION2', ';']])
('DECL', [['type', 'ID', ';']])
('DECL_ST', [['DECL', 'ST'], ['DECL']])
('DEFN', [['type', 'ASSIGN']])
('DEFN_ST', [['DEFN', 'ST'], ['DEFN']])
('E', [['T', "E'"]])
("E'", [['M', "E1'"], ['M', "E2'"]])
("E1'", [['+', 'T', "E'"], ['epsilon']])
("E2'", [['-', 'T', "E'"], ['epsilon']])
('EXPRESSION', [['E']])
('EXPRESSION1', [['EXPRESSION']])
('EXPRESSION2', [['EXPRESSION']])
('F', [['(', 'E', ')'], ['identifier'], ['number']])
('FOR_LOOP', [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']])
('FOR_LOOP_ST', [['FOR_LOOP', 'ST'], ['FOR_LOOP']])
('ID', [['identifier', "ID'"]])
("ID'", [[',', 'identifier', "ID'"], ['epsilon']])
('IF_COND', [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']])
('IF_COND_ST', [['IF_COND', 'ST'], ['IF_COND']])
('INCREMENT', [['I_ASSIGN'], ['I_COND'], ['EXPRESSION']])
('I_ASSIGN', [['identifier', '=', 'EXPRESSION']])
('I_COND', [['EXPRESSION1', 'relational_operator', 'EXPRESSION2']])
('M', [['epsilon']])
('OP_ELSE', [['else', '{', 'STATEMENT', '}']])
('PROG', [['STATEMENT', 'eof']])
('ST', [['STATEMENT_ST']])
('STATEMENT', [['FOR_LOOP_ST'], ['IF_COND_ST'], ['DEFN_ST'], ['ASSIGN_ST'], ['DECL_ST']])
('STATEMENT_ST', [['STATEMENT', ';', 'ST'], ['STATEMENT']])
('T', [['F', "T'"]])
("T'", [['M', "T1'"], ['M', "T2'"]])
("T1'", [['*', 'F', "T'"], ['epsilon']])
("T2'", [['/', 'F', "T'"], ['epsilon']])


[('i', 'identifier'), ('=', 'assignment_operator'), ('10', 'number'), ('/', 'arithmetic_operator'), ('2', 'number'), (';', 'punctuation')]




TREE
PROG 
in match rule with  PROG : [['STATEMENT', 'eof']]
in rule  ['STATEMENT', 'eof']  with  i
TREE
PROG [STATEMENT eof ] 
SYMBOL  STATEMENT
in symbol STATEMENT 		(in rule  ['STATEMENT', 'eof'] )
in producer
in match rule with  STATEMENT : [['FOR_LOOP_ST'], ['IF_COND_ST'], ['DEFN_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['FOR_LOOP_ST']  with  i
TREE
STATEMENT [FOR_LOOP_ST ] 
SYMBOL  FOR_LOOP_ST
in symbol FOR_LOOP_ST 		(in rule  ['FOR_LOOP_ST'] )
in producer
in match rule with  FOR_LOOP_ST : [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
in rule  ['FOR_LOOP', 'ST']  with  i
TREE
FOR_LOOP_ST [FOR_LOOP ST ] 
SYMBOL  FOR_LOOP
in symbol FOR_LOOP 		(in rule  ['FOR_LOOP', 'ST'] )
in producer
in match rule with  FOR_LOOP : [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with  i
TREE
FOR_LOOP [for ( ASSIGN COND INCREMENT ) { STATEMENT } ] 
SYMBOL  for
in symbol for 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else i for
5. unmatched for i
TREE
FOR_LOOP 
returned false  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
2. unmatched FOR_LOOP i i ['FOR_LOOP', 'ST']
TREE
FOR_LOOP_ST 
returned false  ['FOR_LOOP', 'ST'] [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
in rule  ['FOR_LOOP']  with  i
TREE
FOR_LOOP_ST [FOR_LOOP ] 
SYMBOL  FOR_LOOP
in symbol FOR_LOOP 		(in rule  ['FOR_LOOP'] )
in producer
in match rule with  FOR_LOOP : [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with  i
TREE
FOR_LOOP [for ( ASSIGN COND INCREMENT ) { STATEMENT } ] 
SYMBOL  for
in symbol for 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else i for
5. unmatched for i
TREE
FOR_LOOP 
returned false  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
2. unmatched FOR_LOOP i i ['FOR_LOOP']
TREE
FOR_LOOP_ST 
returned false  ['FOR_LOOP'] [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
2. unmatched FOR_LOOP_ST i i ['FOR_LOOP_ST']
TREE
STATEMENT 
returned false  ['FOR_LOOP_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['DEFN_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['IF_COND_ST']  with  i
TREE
STATEMENT [IF_COND_ST ] 
SYMBOL  IF_COND_ST
in symbol IF_COND_ST 		(in rule  ['IF_COND_ST'] )
in producer
in match rule with  IF_COND_ST : [['IF_COND', 'ST'], ['IF_COND']]
in rule  ['IF_COND', 'ST']  with  i
TREE
IF_COND_ST [IF_COND ST ] 
SYMBOL  IF_COND
in symbol IF_COND 		(in rule  ['IF_COND', 'ST'] )
in producer
in match rule with  IF_COND : [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with  i
TREE
IF_COND [if ( COND ) { STATEMENT ; } OP_ELSE ] 
SYMBOL  if
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] )
else i if
5. unmatched if i
TREE
IF_COND 
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with  i
TREE
IF_COND [if ( COND ) { STATEMENT } ] 
SYMBOL  if
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] )
else i if
5. unmatched if i
TREE
IF_COND 
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']]
2. unmatched IF_COND i i ['IF_COND', 'ST']
TREE
IF_COND_ST 
returned false  ['IF_COND', 'ST'] [['IF_COND', 'ST'], ['IF_COND']]
in rule  ['IF_COND']  with  i
TREE
IF_COND_ST [IF_COND ] 
SYMBOL  IF_COND
in symbol IF_COND 		(in rule  ['IF_COND'] )
in producer
in match rule with  IF_COND : [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with  i
TREE
IF_COND [if ( COND ) { STATEMENT ; } OP_ELSE ] 
SYMBOL  if
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] )
else i if
5. unmatched if i
TREE
IF_COND 
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with  i
TREE
IF_COND [if ( COND ) { STATEMENT } ] 
SYMBOL  if
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] )
else i if
5. unmatched if i
TREE
IF_COND 
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']]
2. unmatched IF_COND i i ['IF_COND']
TREE
IF_COND_ST 
returned false  ['IF_COND'] [['IF_COND', 'ST'], ['IF_COND']]
2. unmatched IF_COND_ST i i ['IF_COND_ST']
TREE
STATEMENT 
returned false  ['IF_COND_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['DEFN_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['DEFN_ST']  with  i
TREE
STATEMENT [DEFN_ST ] 
SYMBOL  DEFN_ST
in symbol DEFN_ST 		(in rule  ['DEFN_ST'] )
in producer
in match rule with  DEFN_ST : [['DEFN', 'ST'], ['DEFN']]
in rule  ['DEFN', 'ST']  with  i
TREE
DEFN_ST [DEFN ST ] 
SYMBOL  DEFN
in symbol DEFN 		(in rule  ['DEFN', 'ST'] )
in producer
in match rule with  DEFN : [['type', 'ASSIGN']]
in rule  ['type', 'ASSIGN']  with  i
TREE
DEFN [type ASSIGN ] 
SYMBOL  type
in symbol type 		(in rule  ['type', 'ASSIGN'] )
is token
in match token i identifier type
4. unmatched token
TREE
DEFN 
returned false  ['type', 'ASSIGN'] [['type', 'ASSIGN']]
2. unmatched DEFN i i ['DEFN', 'ST']
TREE
DEFN_ST 
returned false  ['DEFN', 'ST'] [['DEFN', 'ST'], ['DEFN']]
in rule  ['DEFN']  with  i
TREE
DEFN_ST [DEFN ] 
SYMBOL  DEFN
in symbol DEFN 		(in rule  ['DEFN'] )
in producer
in match rule with  DEFN : [['type', 'ASSIGN']]
in rule  ['type', 'ASSIGN']  with  i
TREE
DEFN [type ASSIGN ] 
SYMBOL  type
in symbol type 		(in rule  ['type', 'ASSIGN'] )
is token
in match token i identifier type
4. unmatched token
TREE
DEFN 
returned false  ['type', 'ASSIGN'] [['type', 'ASSIGN']]
2. unmatched DEFN i i ['DEFN']
TREE
DEFN_ST 
returned false  ['DEFN'] [['DEFN', 'ST'], ['DEFN']]
2. unmatched DEFN_ST i i ['DEFN_ST']
TREE
STATEMENT 
returned false  ['DEFN_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['DEFN_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['ASSIGN_ST']  with  i
TREE
STATEMENT [ASSIGN_ST ] 
SYMBOL  ASSIGN_ST
in symbol ASSIGN_ST 		(in rule  ['ASSIGN_ST'] )
in producer
in match rule with  ASSIGN_ST : [['ASSIGN', 'ST'], ['ASSIGN']]
in rule  ['ASSIGN', 'ST']  with  i
TREE
ASSIGN_ST [ASSIGN ST ] 
SYMBOL  ASSIGN
in symbol ASSIGN 		(in rule  ['ASSIGN', 'ST'] )
in producer
in match rule with  ASSIGN : [['identifier', '=', 'EXPRESSION', ';']]
in rule  ['identifier', '=', 'EXPRESSION', ';']  with  i
TREE
ASSIGN [identifier = EXPRESSION ; ] 
SYMBOL  identifier
in symbol identifier 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
is token
in match token i identifier identifier
2.SYMBOL in RULE identifier ['identifier', '=', 'EXPRESSION', ';'] ASSIGN
3. NOT LAST
matched
2. temp store = =
SYMBOL  =
in symbol = 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
else = =
matched
SYMBOL  EXPRESSION
in symbol EXPRESSION 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  10
TREE
EXPRESSION [E ] 
SYMBOL  E
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"]]
in rule  ['T', "E'"]  with  10
TREE
E [T E' ] 
SYMBOL  T
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"]]
in rule  ['F', "T'"]  with  10
TREE
T [F T' ] 
SYMBOL  F
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  10
TREE
F [( E ) ] 
SYMBOL  (
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 10 (
5. unmatched ( 10
TREE
F 
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  10
TREE
F [identifier ] 
SYMBOL  identifier
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 10 number identifier
4. unmatched token
TREE
F 
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  10
TREE
F [number ] 
SYMBOL  number
in symbol number 		(in rule  ['number'] )
is token
in match token 10 number number
TOKENSET  number 10
2.SYMBOL in RULE number ['number'] F
matched
2. temp store 10 /
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2 ['number']
2. LAST ['number']
done
1.SYMBOL in RULE F ['F', "T'"]
1. NOT LAST
1. temp store / /
SYMBOL  T'
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['M', "T1'"], ['M', "T2'"]]
in rule  ['M', "T1'"]  with  /
TREE
T' [M T1' ] 
SYMBOL  M
in symbol M 		(in rule  ['M', "T1'"] )
in producer
in match rule with  M : [['epsilon']]
in rule  ['epsilon']  with  /
TREE
M [epsilon ] 
SYMBOL  epsilon
in symbol epsilon 		(in rule  ['epsilon'] )
else / epsilon
here we are ['epsilon'] [['epsilon']] 0 ['epsilon']
2. LAST ['epsilon']
done
1.SYMBOL in RULE M ['M', "T1'"]
1. NOT LAST
1. temp store / /
SYMBOL  T1'
in symbol T1' 		(in rule  ['M', "T1'"] )
in producer
in match rule with  T1' : [['*', 'F', "T'"], ['epsilon']]
in rule  ['*', 'F', "T'"]  with  /
TREE
T1' [* F T' ] 
SYMBOL  *
in symbol * 		(in rule  ['*', 'F', "T'"] )
else / *
5. unmatched * /
TREE
T1' 
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['epsilon']]
in rule  ['epsilon']  with  /
TREE
T1' [epsilon ] 
SYMBOL  epsilon
in symbol epsilon 		(in rule  ['epsilon'] )
else / epsilon
here we are ['epsilon'] [['*', 'F', "T'"], ['epsilon']] 1 ['epsilon']
2. LAST ['epsilon']
done
1. unmatched T1' / / ['M', "T1'"]
here we are ['M', "T1'"] [['M', "T1'"], ['M', "T2'"]] 0 ['M', "T1'"]
2. LAST ['M', "T1'"]
done
1. unmatched T' / / ['F', "T'"]
here we are ['F', "T'"] [['F', "T'"]] 0 ['F', "T'"]
2. LAST ['F', "T'"]
done
1.SYMBOL in RULE T ['T', "E'"]
1. NOT LAST
1. temp store / /
SYMBOL  E'
in symbol E' 		(in rule  ['T', "E'"] )
in producer
in match rule with  E' : [['M', "E1'"], ['M', "E2'"]]
in rule  ['M', "E1'"]  with  /
TREE
E' [M E1' ] 
SYMBOL  M
in symbol M 		(in rule  ['M', "E1'"] )
in producer
in match rule with  M : [['epsilon']]
in rule  ['epsilon']  with  /
TREE
M [epsilon ] 
SYMBOL  epsilon
in symbol epsilon 		(in rule  ['epsilon'] )
else / epsilon
here we are ['epsilon'] [['epsilon']] 0 ['epsilon']
2. LAST ['epsilon']
done
1.SYMBOL in RULE M ['M', "E1'"]
1. NOT LAST
1. temp store / /
SYMBOL  E1'
in symbol E1' 		(in rule  ['M', "E1'"] )
in producer
in match rule with  E1' : [['+', 'T', "E'"], ['epsilon']]
in rule  ['+', 'T', "E'"]  with  /
TREE
E1' [+ T E' ] 
SYMBOL  +
in symbol + 		(in rule  ['+', 'T', "E'"] )
else / +
5. unmatched + /
TREE
E1' 
returned false  ['+', 'T', "E'"] [['+', 'T', "E'"], ['epsilon']]
in rule  ['epsilon']  with  /
TREE
E1' [epsilon ] 
SYMBOL  epsilon
in symbol epsilon 		(in rule  ['epsilon'] )
else / epsilon
here we are ['epsilon'] [['+', 'T', "E'"], ['epsilon']] 1 ['epsilon']
2. LAST ['epsilon']
done
1. unmatched E1' / / ['M', "E1'"]
here we are ['M', "E1'"] [['M', "E1'"], ['M', "E2'"]] 0 ['M', "E1'"]
2. LAST ['M', "E1'"]
done
1. unmatched E' / / ['T', "E'"]
here we are ['T', "E'"] [['T', "E'"]] 0 ['T', "E'"]
2. LAST ['T', "E'"]
done
1.SYMBOL in RULE E ['E']
1. temp store 10 /
here we are ['E'] [['E']] 0 ['E']
2. LAST ['E']
done
1.SYMBOL in RULE EXPRESSION ['identifier', '=', 'EXPRESSION', ';']
1. NOT LAST
1. temp store / /
SYMBOL  ;
in symbol ; 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
else / ;
5. unmatched ; /
TREE
ASSIGN 
returned false  ['identifier', '=', 'EXPRESSION', ';'] [['identifier', '=', 'EXPRESSION', ';']]
2. unmatched ASSIGN i / ['ASSIGN', 'ST']
TREE
ASSIGN_ST 
returned false  ['ASSIGN', 'ST'] [['ASSIGN', 'ST'], ['ASSIGN']]
in rule  ['ASSIGN']  with  i
TREE
ASSIGN_ST [ASSIGN ] 
SYMBOL  ASSIGN
in symbol ASSIGN 		(in rule  ['ASSIGN'] )
in producer
in match rule with  ASSIGN : [['identifier', '=', 'EXPRESSION', ';']]
in rule  ['identifier', '=', 'EXPRESSION', ';']  with  i
TREE
ASSIGN [identifier = EXPRESSION ; ] 
SYMBOL  identifier
in symbol identifier 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
is token
in match token i identifier identifier
2.SYMBOL in RULE identifier ['identifier', '=', 'EXPRESSION', ';'] ASSIGN
3. NOT LAST
matched
2. temp store = =
SYMBOL  =
in symbol = 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
else = =
matched
SYMBOL  EXPRESSION
in symbol EXPRESSION 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  10
TREE
EXPRESSION [E ] 
SYMBOL  E
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"]]
in rule  ['T', "E'"]  with  10
TREE
E [T E' ] 
SYMBOL  T
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"]]
in rule  ['F', "T'"]  with  10
TREE
T [F T' ] 
SYMBOL  F
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  10
TREE
F [( E ) ] 
SYMBOL  (
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 10 (
5. unmatched ( 10
TREE
F 
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  10
TREE
F [identifier ] 
SYMBOL  identifier
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 10 number identifier
4. unmatched token
TREE
F 
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  10
TREE
F [number ] 
SYMBOL  number
in symbol number 		(in rule  ['number'] )
is token
in match token 10 number number
TOKENSET  number 10
2.SYMBOL in RULE number ['number'] F
matched
2. temp store 10 /
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2 ['number']
2. LAST ['number']
done
1.SYMBOL in RULE F ['F', "T'"]
1. NOT LAST
1. temp store / /
SYMBOL  T'
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['M', "T1'"], ['M', "T2'"]]
in rule  ['M', "T1'"]  with  /
TREE
T' [M T1' ] 
SYMBOL  M
in symbol M 		(in rule  ['M', "T1'"] )
in producer
in match rule with  M : [['epsilon']]
in rule  ['epsilon']  with  /
TREE
M [epsilon ] 
SYMBOL  epsilon
in symbol epsilon 		(in rule  ['epsilon'] )
else / epsilon
here we are ['epsilon'] [['epsilon']] 0 ['epsilon']
2. LAST ['epsilon']
done
1.SYMBOL in RULE M ['M', "T1'"]
1. NOT LAST
1. temp store / /
SYMBOL  T1'
in symbol T1' 		(in rule  ['M', "T1'"] )
in producer
in match rule with  T1' : [['*', 'F', "T'"], ['epsilon']]
in rule  ['*', 'F', "T'"]  with  /
TREE
T1' [* F T' ] 
SYMBOL  *
in symbol * 		(in rule  ['*', 'F', "T'"] )
else / *
5. unmatched * /
TREE
T1' 
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['epsilon']]
in rule  ['epsilon']  with  /
TREE
T1' [epsilon ] 
SYMBOL  epsilon
in symbol epsilon 		(in rule  ['epsilon'] )
else / epsilon
here we are ['epsilon'] [['*', 'F', "T'"], ['epsilon']] 1 ['epsilon']
2. LAST ['epsilon']
done
1. unmatched T1' / / ['M', "T1'"]
here we are ['M', "T1'"] [['M', "T1'"], ['M', "T2'"]] 0 ['M', "T1'"]
2. LAST ['M', "T1'"]
done
1. unmatched T' / / ['F', "T'"]
here we are ['F', "T'"] [['F', "T'"]] 0 ['F', "T'"]
2. LAST ['F', "T'"]
done
1.SYMBOL in RULE T ['T', "E'"]
1. NOT LAST
1. temp store / /
SYMBOL  E'
in symbol E' 		(in rule  ['T', "E'"] )
in producer
in match rule with  E' : [['M', "E1'"], ['M', "E2'"]]
in rule  ['M', "E1'"]  with  /
TREE
E' [M E1' ] 
SYMBOL  M
in symbol M 		(in rule  ['M', "E1'"] )
in producer
in match rule with  M : [['epsilon']]
in rule  ['epsilon']  with  /
TREE
M [epsilon ] 
SYMBOL  epsilon
in symbol epsilon 		(in rule  ['epsilon'] )
else / epsilon
here we are ['epsilon'] [['epsilon']] 0 ['epsilon']
2. LAST ['epsilon']
done
1.SYMBOL in RULE M ['M', "E1'"]
1. NOT LAST
1. temp store / /
SYMBOL  E1'
in symbol E1' 		(in rule  ['M', "E1'"] )
in producer
in match rule with  E1' : [['+', 'T', "E'"], ['epsilon']]
in rule  ['+', 'T', "E'"]  with  /
TREE
E1' [+ T E' ] 
SYMBOL  +
in symbol + 		(in rule  ['+', 'T', "E'"] )
else / +
5. unmatched + /
TREE
E1' 
returned false  ['+', 'T', "E'"] [['+', 'T', "E'"], ['epsilon']]
in rule  ['epsilon']  with  /
TREE
E1' [epsilon ] 
SYMBOL  epsilon
in symbol epsilon 		(in rule  ['epsilon'] )
else / epsilon
here we are ['epsilon'] [['+', 'T', "E'"], ['epsilon']] 1 ['epsilon']
2. LAST ['epsilon']
done
1. unmatched E1' / / ['M', "E1'"]
here we are ['M', "E1'"] [['M', "E1'"], ['M', "E2'"]] 0 ['M', "E1'"]
2. LAST ['M', "E1'"]
done
1. unmatched E' / / ['T', "E'"]
here we are ['T', "E'"] [['T', "E'"]] 0 ['T', "E'"]
2. LAST ['T', "E'"]
done
1.SYMBOL in RULE E ['E']
1. temp store 10 /
here we are ['E'] [['E']] 0 ['E']
2. LAST ['E']
done
1.SYMBOL in RULE EXPRESSION ['identifier', '=', 'EXPRESSION', ';']
1. NOT LAST
1. temp store / /
SYMBOL  ;
in symbol ; 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
else / ;
5. unmatched ; /
TREE
ASSIGN 
returned false  ['identifier', '=', 'EXPRESSION', ';'] [['identifier', '=', 'EXPRESSION', ';']]
2. unmatched ASSIGN i / ['ASSIGN']
TREE
ASSIGN_ST 
returned false  ['ASSIGN'] [['ASSIGN', 'ST'], ['ASSIGN']]
2. unmatched ASSIGN_ST i / ['ASSIGN_ST']
TREE
STATEMENT 
returned false  ['ASSIGN_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['DEFN_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['DECL_ST']  with  i
TREE
STATEMENT [DECL_ST ] 
SYMBOL  DECL_ST
in symbol DECL_ST 		(in rule  ['DECL_ST'] )
in producer
in match rule with  DECL_ST : [['DECL', 'ST'], ['DECL']]
in rule  ['DECL', 'ST']  with  i
TREE
DECL_ST [DECL ST ] 
SYMBOL  DECL
in symbol DECL 		(in rule  ['DECL', 'ST'] )
in producer
in match rule with  DECL : [['type', 'ID', ';']]
in rule  ['type', 'ID', ';']  with  i
TREE
DECL [type ID ; ] 
SYMBOL  type
in symbol type 		(in rule  ['type', 'ID', ';'] )
is token
in match token i identifier type
4. unmatched token
TREE
DECL 
returned false  ['type', 'ID', ';'] [['type', 'ID', ';']]
2. unmatched DECL i / ['DECL', 'ST']
TREE
DECL_ST 
returned false  ['DECL', 'ST'] [['DECL', 'ST'], ['DECL']]
in rule  ['DECL']  with  i
TREE
DECL_ST [DECL ] 
SYMBOL  DECL
in symbol DECL 		(in rule  ['DECL'] )
in producer
in match rule with  DECL : [['type', 'ID', ';']]
in rule  ['type', 'ID', ';']  with  i
TREE
DECL [type ID ; ] 
SYMBOL  type
in symbol type 		(in rule  ['type', 'ID', ';'] )
is token
in match token i identifier type
4. unmatched token
TREE
DECL 
returned false  ['type', 'ID', ';'] [['type', 'ID', ';']]
2. unmatched DECL i / ['DECL']
TREE
DECL_ST 
returned false  ['DECL'] [['DECL', 'ST'], ['DECL']]
2. unmatched DECL_ST i / ['DECL_ST']
TREE
STATEMENT 
returned false  ['DECL_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['DEFN_ST'], ['ASSIGN_ST'], ['DECL_ST']]
2. unmatched STATEMENT i / ['STATEMENT', 'eof']
TREE
PROG 
returned false  ['STATEMENT', 'eof'] [['STATEMENT', 'eof']]
ERROR i /
TREE
PROG 
