('ASSIGN', [['identifier', '=', 'EXPRESSION', ';']])
('ASSIGN_ST', [['ASSIGN', 'ST'], ['ASSIGN']])
('COND', [['EXPRESSION', 'relational_operator', 'EXPRESSION', ';']])
('DECL', [['type', 'identifier', ';']])
('DECL_ST', [['DECL', 'ST'], ['DECL']])
('E', [['T', "E'"], ['T']])
("E'", [['+', 'T', "E'"], ['-', 'T', "E'"]])
('EXPRESSION', [['E']])
('F', [['G', '^', 'F'], ['G']])
('FOR_LOOP', [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']])
('FOR_LOOP_ST', [['FOR_LOOP', 'ST'], ['FOR_LOOP']])
('G', [['(', 'E', ')'], ['identifier'], ['number']])
('IF_COND', [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']])
('IF_COND_ST', [['IF_COND', 'ST'], ['IF_COND']])
('INCREMENT', [['I_ASSIGN'], ['I_COND'], ['EXPRESSION']])
('I_ASSIGN', [['identifier', '=', 'EXPRESSION']])
('OP_ELSE', [['else', '{', 'STATEMENT', '}']])
('PROG', [['STATEMENT', 'eof']])
('ST', [['STATEMENT_ST']])
('STATEMENT', [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']])
('STATEMENT_ST', [['STATEMENT', ';', 'ST'], ['STATEMENT']])
('T', [['F', "T'"], ['F']])
("T'", [['*', 'F', "T'"], ['/', 'F', "T'"]])


[('for', 'keyword'), ('(', 'punctuation'), ('i', 'identifier'), ('=', 'assignment_operator'), ('0', 'number'), (';', 'punctuation'), ('j', 'identifier'), ('<', 'relational_operator'), ('10', 'number'), (';', 'punctuation'), ('k', 'identifier'), ('=', 'assignment_operator'), ('5', 'number'), (')', 'punctuation'), ('{', 'punctuation'), ('l', 'identifier'), ('=', 'assignment_operator'), ('5', 'number'), (';', 'punctuation'), ('}', 'punctuation')]




in match rule with  PROG : [['STATEMENT', 'eof']]
in rule  ['STATEMENT', 'eof']  with  for
in symbol STATEMENT 		(in rule  ['STATEMENT', 'eof'] )
in producer
in match rule with  STATEMENT : [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['FOR_LOOP_ST']  with  for
in symbol FOR_LOOP_ST 		(in rule  ['FOR_LOOP_ST'] )
in producer
in match rule with  FOR_LOOP_ST : [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
in rule  ['FOR_LOOP', 'ST']  with  for
in symbol FOR_LOOP 		(in rule  ['FOR_LOOP', 'ST'] )
in producer
in match rule with  FOR_LOOP : [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with  for
in symbol for 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else for for
matched
in symbol ( 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else ( (
matched
in symbol ASSIGN 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
in producer
in match rule with  ASSIGN : [['identifier', '=', 'EXPRESSION', ';']]
in rule  ['identifier', '=', 'EXPRESSION', ';']  with  i
in symbol identifier 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
is token
in match token i identifier identifier
matched
2. temp store = =
in symbol = 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
else = =
matched
in symbol EXPRESSION 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  0
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  0
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  0
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  0
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  0
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 0 (
5. unmatched ( 0
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  0
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 0 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  0
in symbol number 		(in rule  ['number'] )
is token
in match token 0 number number
matched
2. temp store 0 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ; ;
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ; ^
5. unmatched ^ ;
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  0
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  0
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 0 (
5. unmatched ( 0
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  0
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 0 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  0
in symbol number 		(in rule  ['number'] )
is token
in match token 0 number number
matched
2. temp store 0 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 0 ;
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store ; ;
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  ;
in symbol * 		(in rule  ['*', 'F', "T'"] )
else ; *
5. unmatched * ;
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  ;
in symbol / 		(in rule  ['/', 'F', "T'"] )
else ; /
5. unmatched / ;
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' ; ; ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  0
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  0
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  0
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 0 (
5. unmatched ( 0
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  0
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 0 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  0
in symbol number 		(in rule  ['number'] )
is token
in match token 0 number number
matched
2. temp store 0 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ; ;
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ; ^
5. unmatched ^ ;
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  0
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  0
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 0 (
5. unmatched ( 0
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  0
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 0 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  0
in symbol number 		(in rule  ['number'] )
is token
in match token 0 number number
matched
2. temp store 0 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 0 ;
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store 0 ;
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T', "E'"]
1. temp store ; ;
in symbol E' 		(in rule  ['T', "E'"] )
in producer
in match rule with  E' : [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['+', 'T', "E'"]  with  ;
in symbol + 		(in rule  ['+', 'T', "E'"] )
else ; +
5. unmatched + ;
returned false  ['+', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['-', 'T', "E'"]  with  ;
in symbol - 		(in rule  ['-', 'T', "E'"] )
else ; -
5. unmatched - ;
returned false  ['-', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
2. unmatched E' ; ; ['T', "E'"]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  0
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  0
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  0
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  0
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 0 (
5. unmatched ( 0
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  0
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 0 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  0
in symbol number 		(in rule  ['number'] )
is token
in match token 0 number number
matched
2. temp store 0 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ; ;
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ; ^
5. unmatched ^ ;
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  0
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  0
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 0 (
5. unmatched ( 0
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  0
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 0 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  0
in symbol number 		(in rule  ['number'] )
is token
in match token 0 number number
matched
2. temp store 0 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 0 ;
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store ; ;
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  ;
in symbol * 		(in rule  ['*', 'F', "T'"] )
else ; *
5. unmatched * ;
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  ;
in symbol / 		(in rule  ['/', 'F', "T'"] )
else ; /
5. unmatched / ;
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' ; ; ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  0
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  0
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  0
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 0 (
5. unmatched ( 0
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  0
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 0 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  0
in symbol number 		(in rule  ['number'] )
is token
in match token 0 number number
matched
2. temp store 0 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ; ;
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ; ^
5. unmatched ^ ;
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  0
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  0
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 0 (
5. unmatched ( 0
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  0
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 0 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  0
in symbol number 		(in rule  ['number'] )
is token
in match token 0 number number
matched
2. temp store 0 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 0 ;
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store 0 ;
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T']
1. temp store 0 ;
here we are ['T'] [['T', "E'"], ['T']] 1
1.SYMBOL in RULE E ['E']
1. temp store 0 ;
here we are ['E'] [['E']] 0
1.SYMBOL in RULE EXPRESSION ['identifier', '=', 'EXPRESSION', ';']
1. temp store ; ;
in symbol ; 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
else ; ;
matched
here we are ['identifier', '=', 'EXPRESSION', ';'] [['identifier', '=', 'EXPRESSION', ';']] 0
1.SYMBOL in RULE ASSIGN ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']
1. temp store j j
in symbol COND 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
in producer
in match rule with  COND : [['EXPRESSION', 'relational_operator', 'EXPRESSION', ';']]
in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION', ';']  with  j
in symbol EXPRESSION 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION', ';'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  j
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  j
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  j
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  j
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  j
in symbol ( 		(in rule  ['(', 'E', ')'] )
else j (
5. unmatched ( j
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  j
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token j identifier identifier
matched
2. temp store j <
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store < <
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else < ^
5. unmatched ^ <
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  j
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  j
in symbol ( 		(in rule  ['(', 'E', ')'] )
else j (
5. unmatched ( j
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  j
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token j identifier identifier
matched
2. temp store j <
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G']
1. temp store j <
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store < <
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  <
in symbol * 		(in rule  ['*', 'F', "T'"] )
else < *
5. unmatched * <
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  <
in symbol / 		(in rule  ['/', 'F', "T'"] )
else < /
5. unmatched / <
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' < < ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  j
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  j
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  j
in symbol ( 		(in rule  ['(', 'E', ')'] )
else j (
5. unmatched ( j
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  j
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token j identifier identifier
matched
2. temp store j <
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store < <
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else < ^
5. unmatched ^ <
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  j
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  j
in symbol ( 		(in rule  ['(', 'E', ')'] )
else j (
5. unmatched ( j
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  j
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token j identifier identifier
matched
2. temp store j <
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G']
1. temp store j <
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store j <
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T', "E'"]
1. temp store < <
in symbol E' 		(in rule  ['T', "E'"] )
in producer
in match rule with  E' : [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['+', 'T', "E'"]  with  <
in symbol + 		(in rule  ['+', 'T', "E'"] )
else < +
5. unmatched + <
returned false  ['+', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['-', 'T', "E'"]  with  <
in symbol - 		(in rule  ['-', 'T', "E'"] )
else < -
5. unmatched - <
returned false  ['-', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
2. unmatched E' < < ['T', "E'"]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  j
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  j
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  j
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  j
in symbol ( 		(in rule  ['(', 'E', ')'] )
else j (
5. unmatched ( j
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  j
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token j identifier identifier
matched
2. temp store j <
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store < <
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else < ^
5. unmatched ^ <
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  j
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  j
in symbol ( 		(in rule  ['(', 'E', ')'] )
else j (
5. unmatched ( j
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  j
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token j identifier identifier
matched
2. temp store j <
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G']
1. temp store j <
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store < <
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  <
in symbol * 		(in rule  ['*', 'F', "T'"] )
else < *
5. unmatched * <
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  <
in symbol / 		(in rule  ['/', 'F', "T'"] )
else < /
5. unmatched / <
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' < < ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  j
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  j
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  j
in symbol ( 		(in rule  ['(', 'E', ')'] )
else j (
5. unmatched ( j
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  j
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token j identifier identifier
matched
2. temp store j <
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store < <
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else < ^
5. unmatched ^ <
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  j
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  j
in symbol ( 		(in rule  ['(', 'E', ')'] )
else j (
5. unmatched ( j
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  j
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token j identifier identifier
matched
2. temp store j <
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G']
1. temp store j <
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store j <
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T']
1. temp store j <
here we are ['T'] [['T', "E'"], ['T']] 1
1.SYMBOL in RULE E ['E']
1. temp store j <
here we are ['E'] [['E']] 0
1.SYMBOL in RULE EXPRESSION ['EXPRESSION', 'relational_operator', 'EXPRESSION', ';']
1. temp store < <
in symbol relational_operator 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION', ';'] )
is token
in match token < relational_operator relational_operator
matched
2. temp store 10 10
in symbol EXPRESSION 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION', ';'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  10
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  10
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  10
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  10
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  10
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 10 (
5. unmatched ( 10
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  10
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 10 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  10
in symbol number 		(in rule  ['number'] )
is token
in match token 10 number number
matched
2. temp store 10 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ; ;
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ; ^
5. unmatched ^ ;
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  10
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  10
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 10 (
5. unmatched ( 10
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  10
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 10 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  10
in symbol number 		(in rule  ['number'] )
is token
in match token 10 number number
matched
2. temp store 10 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 10 ;
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store ; ;
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  ;
in symbol * 		(in rule  ['*', 'F', "T'"] )
else ; *
5. unmatched * ;
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  ;
in symbol / 		(in rule  ['/', 'F', "T'"] )
else ; /
5. unmatched / ;
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' ; ; ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  10
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  10
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  10
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 10 (
5. unmatched ( 10
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  10
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 10 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  10
in symbol number 		(in rule  ['number'] )
is token
in match token 10 number number
matched
2. temp store 10 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ; ;
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ; ^
5. unmatched ^ ;
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  10
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  10
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 10 (
5. unmatched ( 10
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  10
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 10 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  10
in symbol number 		(in rule  ['number'] )
is token
in match token 10 number number
matched
2. temp store 10 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 10 ;
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store 10 ;
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T', "E'"]
1. temp store ; ;
in symbol E' 		(in rule  ['T', "E'"] )
in producer
in match rule with  E' : [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['+', 'T', "E'"]  with  ;
in symbol + 		(in rule  ['+', 'T', "E'"] )
else ; +
5. unmatched + ;
returned false  ['+', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['-', 'T', "E'"]  with  ;
in symbol - 		(in rule  ['-', 'T', "E'"] )
else ; -
5. unmatched - ;
returned false  ['-', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
2. unmatched E' ; ; ['T', "E'"]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  10
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  10
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  10
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  10
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 10 (
5. unmatched ( 10
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  10
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 10 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  10
in symbol number 		(in rule  ['number'] )
is token
in match token 10 number number
matched
2. temp store 10 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ; ;
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ; ^
5. unmatched ^ ;
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  10
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  10
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 10 (
5. unmatched ( 10
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  10
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 10 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  10
in symbol number 		(in rule  ['number'] )
is token
in match token 10 number number
matched
2. temp store 10 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 10 ;
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store ; ;
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  ;
in symbol * 		(in rule  ['*', 'F', "T'"] )
else ; *
5. unmatched * ;
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  ;
in symbol / 		(in rule  ['/', 'F', "T'"] )
else ; /
5. unmatched / ;
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' ; ; ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  10
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  10
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  10
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 10 (
5. unmatched ( 10
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  10
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 10 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  10
in symbol number 		(in rule  ['number'] )
is token
in match token 10 number number
matched
2. temp store 10 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ; ;
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ; ^
5. unmatched ^ ;
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  10
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  10
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 10 (
5. unmatched ( 10
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  10
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 10 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  10
in symbol number 		(in rule  ['number'] )
is token
in match token 10 number number
matched
2. temp store 10 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 10 ;
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store 10 ;
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T']
1. temp store 10 ;
here we are ['T'] [['T', "E'"], ['T']] 1
1.SYMBOL in RULE E ['E']
1. temp store 10 ;
here we are ['E'] [['E']] 0
1.SYMBOL in RULE EXPRESSION ['EXPRESSION', 'relational_operator', 'EXPRESSION', ';']
1. temp store ; ;
in symbol ; 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION', ';'] )
else ; ;
matched
here we are ['EXPRESSION', 'relational_operator', 'EXPRESSION', ';'] [['EXPRESSION', 'relational_operator', 'EXPRESSION', ';']] 0
1.SYMBOL in RULE COND ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']
1. temp store k k
in symbol INCREMENT 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
in producer
in match rule with  INCREMENT : [['I_ASSIGN'], ['I_COND'], ['EXPRESSION']]
in rule  ['I_ASSIGN']  with  k
in symbol I_ASSIGN 		(in rule  ['I_ASSIGN'] )
in producer
in match rule with  I_ASSIGN : [['identifier', '=', 'EXPRESSION']]
in rule  ['identifier', '=', 'EXPRESSION']  with  k
in symbol identifier 		(in rule  ['identifier', '=', 'EXPRESSION'] )
is token
in match token k identifier identifier
matched
2. temp store = =
in symbol = 		(in rule  ['identifier', '=', 'EXPRESSION'] )
else = =
matched
in symbol EXPRESSION 		(in rule  ['identifier', '=', 'EXPRESSION'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  5
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  5
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  5
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  5
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 )
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ) )
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ) ^
5. unmatched ^ )
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  5
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 )
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 5 )
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store ) )
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  )
in symbol * 		(in rule  ['*', 'F', "T'"] )
else ) *
5. unmatched * )
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  )
in symbol / 		(in rule  ['/', 'F', "T'"] )
else ) /
5. unmatched / )
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' ) ) ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  5
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  5
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 )
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ) )
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ) ^
5. unmatched ^ )
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  5
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 )
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 5 )
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store 5 )
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T', "E'"]
1. temp store ) )
in symbol E' 		(in rule  ['T', "E'"] )
in producer
in match rule with  E' : [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['+', 'T', "E'"]  with  )
in symbol + 		(in rule  ['+', 'T', "E'"] )
else ) +
5. unmatched + )
returned false  ['+', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['-', 'T', "E'"]  with  )
in symbol - 		(in rule  ['-', 'T', "E'"] )
else ) -
5. unmatched - )
returned false  ['-', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
2. unmatched E' ) ) ['T', "E'"]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  5
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  5
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  5
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 )
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ) )
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ) ^
5. unmatched ^ )
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  5
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 )
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 5 )
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store ) )
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  )
in symbol * 		(in rule  ['*', 'F', "T'"] )
else ) *
5. unmatched * )
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  )
in symbol / 		(in rule  ['/', 'F', "T'"] )
else ) /
5. unmatched / )
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' ) ) ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  5
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  5
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 )
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ) )
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ) ^
5. unmatched ^ )
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  5
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 )
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 5 )
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store 5 )
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T']
1. temp store 5 )
here we are ['T'] [['T', "E'"], ['T']] 1
1.SYMBOL in RULE E ['E']
1. temp store 5 )
here we are ['E'] [['E']] 0
1.SYMBOL in RULE EXPRESSION ['identifier', '=', 'EXPRESSION']
1. temp store 5 )
here we are ['identifier', '=', 'EXPRESSION'] [['identifier', '=', 'EXPRESSION']] 0
1.SYMBOL in RULE I_ASSIGN ['I_ASSIGN']
1. temp store k )
here we are ['I_ASSIGN'] [['I_ASSIGN'], ['I_COND'], ['EXPRESSION']] 0
1.SYMBOL in RULE INCREMENT ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']
1. temp store ) )
in symbol ) 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else ) )
matched
in symbol { 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else { {
matched
in symbol STATEMENT 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
in producer
in match rule with  STATEMENT : [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['FOR_LOOP_ST']  with  l
in symbol FOR_LOOP_ST 		(in rule  ['FOR_LOOP_ST'] )
in producer
in match rule with  FOR_LOOP_ST : [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
in rule  ['FOR_LOOP', 'ST']  with  l
in symbol FOR_LOOP 		(in rule  ['FOR_LOOP', 'ST'] )
in producer
in match rule with  FOR_LOOP : [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with  l
in symbol for 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else l for
5. unmatched for l
returned false  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
2. unmatched FOR_LOOP l l ['FOR_LOOP', 'ST']
returned false  ['FOR_LOOP', 'ST'] [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
in rule  ['FOR_LOOP']  with  l
in symbol FOR_LOOP 		(in rule  ['FOR_LOOP'] )
in producer
in match rule with  FOR_LOOP : [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with  l
in symbol for 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else l for
5. unmatched for l
returned false  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
2. unmatched FOR_LOOP l l ['FOR_LOOP']
returned false  ['FOR_LOOP'] [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
2. unmatched FOR_LOOP_ST l l ['FOR_LOOP_ST']
returned false  ['FOR_LOOP_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['IF_COND_ST']  with  l
in symbol IF_COND_ST 		(in rule  ['IF_COND_ST'] )
in producer
in match rule with  IF_COND_ST : [['IF_COND', 'ST'], ['IF_COND']]
in rule  ['IF_COND', 'ST']  with  l
in symbol IF_COND 		(in rule  ['IF_COND', 'ST'] )
in producer
in match rule with  IF_COND : [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with  l
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] )
else l if
5. unmatched if l
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with  l
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] )
else l if
5. unmatched if l
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']  with  l
in symbol EXPRESSION 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  l
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  l
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  l
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  l
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  l
in symbol ( 		(in rule  ['(', 'E', ')'] )
else l (
5. unmatched ( l
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  l
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token l identifier identifier
matched
2. temp store l =
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store = =
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else = ^
5. unmatched ^ =
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  l
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  l
in symbol ( 		(in rule  ['(', 'E', ')'] )
else l (
5. unmatched ( l
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  l
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token l identifier identifier
matched
2. temp store l =
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G']
1. temp store l =
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store = =
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  =
in symbol * 		(in rule  ['*', 'F', "T'"] )
else = *
5. unmatched * =
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  =
in symbol / 		(in rule  ['/', 'F', "T'"] )
else = /
5. unmatched / =
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' = = ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  l
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  l
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  l
in symbol ( 		(in rule  ['(', 'E', ')'] )
else l (
5. unmatched ( l
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  l
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token l identifier identifier
matched
2. temp store l =
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store = =
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else = ^
5. unmatched ^ =
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  l
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  l
in symbol ( 		(in rule  ['(', 'E', ')'] )
else l (
5. unmatched ( l
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  l
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token l identifier identifier
matched
2. temp store l =
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G']
1. temp store l =
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store l =
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T', "E'"]
1. temp store = =
in symbol E' 		(in rule  ['T', "E'"] )
in producer
in match rule with  E' : [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['+', 'T', "E'"]  with  =
in symbol + 		(in rule  ['+', 'T', "E'"] )
else = +
5. unmatched + =
returned false  ['+', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['-', 'T', "E'"]  with  =
in symbol - 		(in rule  ['-', 'T', "E'"] )
else = -
5. unmatched - =
returned false  ['-', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
2. unmatched E' = = ['T', "E'"]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  l
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  l
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  l
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  l
in symbol ( 		(in rule  ['(', 'E', ')'] )
else l (
5. unmatched ( l
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  l
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token l identifier identifier
matched
2. temp store l =
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store = =
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else = ^
5. unmatched ^ =
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  l
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  l
in symbol ( 		(in rule  ['(', 'E', ')'] )
else l (
5. unmatched ( l
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  l
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token l identifier identifier
matched
2. temp store l =
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G']
1. temp store l =
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store = =
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  =
in symbol * 		(in rule  ['*', 'F', "T'"] )
else = *
5. unmatched * =
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  =
in symbol / 		(in rule  ['/', 'F', "T'"] )
else = /
5. unmatched / =
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' = = ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  l
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  l
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  l
in symbol ( 		(in rule  ['(', 'E', ')'] )
else l (
5. unmatched ( l
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  l
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token l identifier identifier
matched
2. temp store l =
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store = =
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else = ^
5. unmatched ^ =
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  l
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  l
in symbol ( 		(in rule  ['(', 'E', ')'] )
else l (
5. unmatched ( l
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  l
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token l identifier identifier
matched
2. temp store l =
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G']
1. temp store l =
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store l =
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T']
1. temp store l =
here we are ['T'] [['T', "E'"], ['T']] 1
1.SYMBOL in RULE E ['E']
1. temp store l =
here we are ['E'] [['E']] 0
1.SYMBOL in RULE EXPRESSION ['EXPRESSION', 'relational_operator', 'EXPRESSION']
1. temp store l =
in symbol relational_operator 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] )
is token
in match token l identifier relational_operator
4. unmatched token
returned false  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
2. unmatched IF_COND l = ['IF_COND', 'ST']
returned false  ['IF_COND', 'ST'] [['IF_COND', 'ST'], ['IF_COND']]
in rule  ['IF_COND']  with  l
in symbol IF_COND 		(in rule  ['IF_COND'] )
in producer
in match rule with  IF_COND : [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with  l
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] )
else l if
5. unmatched if l
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with  l
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] )
else l if
5. unmatched if l
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']  with  l
in symbol EXPRESSION 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  l
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  l
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  l
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  l
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  l
in symbol ( 		(in rule  ['(', 'E', ')'] )
else l (
5. unmatched ( l
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  l
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token l identifier identifier
matched
2. temp store l =
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store = =
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else = ^
5. unmatched ^ =
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  l
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  l
in symbol ( 		(in rule  ['(', 'E', ')'] )
else l (
5. unmatched ( l
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  l
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token l identifier identifier
matched
2. temp store l =
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G']
1. temp store l =
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store = =
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  =
in symbol * 		(in rule  ['*', 'F', "T'"] )
else = *
5. unmatched * =
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  =
in symbol / 		(in rule  ['/', 'F', "T'"] )
else = /
5. unmatched / =
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' = = ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  l
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  l
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  l
in symbol ( 		(in rule  ['(', 'E', ')'] )
else l (
5. unmatched ( l
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  l
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token l identifier identifier
matched
2. temp store l =
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store = =
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else = ^
5. unmatched ^ =
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  l
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  l
in symbol ( 		(in rule  ['(', 'E', ')'] )
else l (
5. unmatched ( l
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  l
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token l identifier identifier
matched
2. temp store l =
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G']
1. temp store l =
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store l =
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T', "E'"]
1. temp store = =
in symbol E' 		(in rule  ['T', "E'"] )
in producer
in match rule with  E' : [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['+', 'T', "E'"]  with  =
in symbol + 		(in rule  ['+', 'T', "E'"] )
else = +
5. unmatched + =
returned false  ['+', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['-', 'T', "E'"]  with  =
in symbol - 		(in rule  ['-', 'T', "E'"] )
else = -
5. unmatched - =
returned false  ['-', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
2. unmatched E' = = ['T', "E'"]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  l
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  l
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  l
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  l
in symbol ( 		(in rule  ['(', 'E', ')'] )
else l (
5. unmatched ( l
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  l
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token l identifier identifier
matched
2. temp store l =
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store = =
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else = ^
5. unmatched ^ =
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  l
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  l
in symbol ( 		(in rule  ['(', 'E', ')'] )
else l (
5. unmatched ( l
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  l
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token l identifier identifier
matched
2. temp store l =
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G']
1. temp store l =
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store = =
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  =
in symbol * 		(in rule  ['*', 'F', "T'"] )
else = *
5. unmatched * =
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  =
in symbol / 		(in rule  ['/', 'F', "T'"] )
else = /
5. unmatched / =
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' = = ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  l
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  l
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  l
in symbol ( 		(in rule  ['(', 'E', ')'] )
else l (
5. unmatched ( l
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  l
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token l identifier identifier
matched
2. temp store l =
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store = =
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else = ^
5. unmatched ^ =
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  l
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  l
in symbol ( 		(in rule  ['(', 'E', ')'] )
else l (
5. unmatched ( l
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  l
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token l identifier identifier
matched
2. temp store l =
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G']
1. temp store l =
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store l =
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T']
1. temp store l =
here we are ['T'] [['T', "E'"], ['T']] 1
1.SYMBOL in RULE E ['E']
1. temp store l =
here we are ['E'] [['E']] 0
1.SYMBOL in RULE EXPRESSION ['EXPRESSION', 'relational_operator', 'EXPRESSION']
1. temp store l =
in symbol relational_operator 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] )
is token
in match token l identifier relational_operator
4. unmatched token
returned false  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
2. unmatched IF_COND l = ['IF_COND']
returned false  ['IF_COND'] [['IF_COND', 'ST'], ['IF_COND']]
2. unmatched IF_COND_ST l = ['IF_COND_ST']
returned false  ['IF_COND_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['ASSIGN_ST']  with  l
in symbol ASSIGN_ST 		(in rule  ['ASSIGN_ST'] )
in producer
in match rule with  ASSIGN_ST : [['ASSIGN', 'ST'], ['ASSIGN']]
in rule  ['ASSIGN', 'ST']  with  l
in symbol ASSIGN 		(in rule  ['ASSIGN', 'ST'] )
in producer
in match rule with  ASSIGN : [['identifier', '=', 'EXPRESSION', ';']]
in rule  ['identifier', '=', 'EXPRESSION', ';']  with  l
in symbol identifier 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
is token
in match token l identifier identifier
matched
2. temp store = =
in symbol = 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
else = =
matched
in symbol EXPRESSION 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  5
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  5
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  5
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  5
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ; ;
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ; ^
5. unmatched ^ ;
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  5
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 5 ;
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store ; ;
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  ;
in symbol * 		(in rule  ['*', 'F', "T'"] )
else ; *
5. unmatched * ;
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  ;
in symbol / 		(in rule  ['/', 'F', "T'"] )
else ; /
5. unmatched / ;
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' ; ; ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  5
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  5
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ; ;
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ; ^
5. unmatched ^ ;
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  5
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 5 ;
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store 5 ;
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T', "E'"]
1. temp store ; ;
in symbol E' 		(in rule  ['T', "E'"] )
in producer
in match rule with  E' : [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['+', 'T', "E'"]  with  ;
in symbol + 		(in rule  ['+', 'T', "E'"] )
else ; +
5. unmatched + ;
returned false  ['+', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['-', 'T', "E'"]  with  ;
in symbol - 		(in rule  ['-', 'T', "E'"] )
else ; -
5. unmatched - ;
returned false  ['-', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
2. unmatched E' ; ; ['T', "E'"]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  5
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  5
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  5
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ; ;
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ; ^
5. unmatched ^ ;
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  5
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 5 ;
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store ; ;
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  ;
in symbol * 		(in rule  ['*', 'F', "T'"] )
else ; *
5. unmatched * ;
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  ;
in symbol / 		(in rule  ['/', 'F', "T'"] )
else ; /
5. unmatched / ;
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' ; ; ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  5
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  5
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ; ;
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ; ^
5. unmatched ^ ;
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  5
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 5 ;
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store 5 ;
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T']
1. temp store 5 ;
here we are ['T'] [['T', "E'"], ['T']] 1
1.SYMBOL in RULE E ['E']
1. temp store 5 ;
here we are ['E'] [['E']] 0
1.SYMBOL in RULE EXPRESSION ['identifier', '=', 'EXPRESSION', ';']
1. temp store ; ;
in symbol ; 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
else ; ;
matched
here we are ['identifier', '=', 'EXPRESSION', ';'] [['identifier', '=', 'EXPRESSION', ';']] 0
1.SYMBOL in RULE ASSIGN ['ASSIGN', 'ST']
1. temp store } }
in symbol ST 		(in rule  ['ASSIGN', 'ST'] )
in producer
in match rule with  ST : [['STATEMENT_ST']]
in rule  ['STATEMENT_ST']  with  }
in symbol STATEMENT_ST 		(in rule  ['STATEMENT_ST'] )
in producer
in match rule with  STATEMENT_ST : [['STATEMENT', ';', 'ST'], ['STATEMENT']]
in rule  ['STATEMENT', ';', 'ST']  with  }
in symbol STATEMENT 		(in rule  ['STATEMENT', ';', 'ST'] )
in producer
in match rule with  STATEMENT : [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['FOR_LOOP_ST']  with  }
in symbol FOR_LOOP_ST 		(in rule  ['FOR_LOOP_ST'] )
in producer
in match rule with  FOR_LOOP_ST : [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
in rule  ['FOR_LOOP', 'ST']  with  }
in symbol FOR_LOOP 		(in rule  ['FOR_LOOP', 'ST'] )
in producer
in match rule with  FOR_LOOP : [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with  }
in symbol for 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else } for
5. unmatched for }
returned false  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
2. unmatched FOR_LOOP } } ['FOR_LOOP', 'ST']
returned false  ['FOR_LOOP', 'ST'] [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
in rule  ['FOR_LOOP']  with  }
in symbol FOR_LOOP 		(in rule  ['FOR_LOOP'] )
in producer
in match rule with  FOR_LOOP : [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with  }
in symbol for 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else } for
5. unmatched for }
returned false  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
2. unmatched FOR_LOOP } } ['FOR_LOOP']
returned false  ['FOR_LOOP'] [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
2. unmatched FOR_LOOP_ST } } ['FOR_LOOP_ST']
returned false  ['FOR_LOOP_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['IF_COND_ST']  with  }
in symbol IF_COND_ST 		(in rule  ['IF_COND_ST'] )
in producer
in match rule with  IF_COND_ST : [['IF_COND', 'ST'], ['IF_COND']]
in rule  ['IF_COND', 'ST']  with  }
in symbol IF_COND 		(in rule  ['IF_COND', 'ST'] )
in producer
in match rule with  IF_COND : [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with  }
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] )
else } if
5. unmatched if }
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with  }
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] )
else } if
5. unmatched if }
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']  with  }
in symbol EXPRESSION 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  }
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  }
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  }
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  }
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  }
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F } } ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  }
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  }
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  }
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F } } ['F']
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T } } ['T', "E'"]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  }
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  }
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  }
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  }
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F } } ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  }
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  }
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  }
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F } } ['F']
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T } } ['T']
returned false  ['T'] [['T', "E'"], ['T']]
2. unmatched E } } ['E']
returned false  ['E'] [['E']]
2. unmatched EXPRESSION } } ['EXPRESSION', 'relational_operator', 'EXPRESSION']
returned false  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
2. unmatched IF_COND } } ['IF_COND', 'ST']
returned false  ['IF_COND', 'ST'] [['IF_COND', 'ST'], ['IF_COND']]
in rule  ['IF_COND']  with  }
in symbol IF_COND 		(in rule  ['IF_COND'] )
in producer
in match rule with  IF_COND : [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with  }
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] )
else } if
5. unmatched if }
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with  }
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] )
else } if
5. unmatched if }
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']  with  }
in symbol EXPRESSION 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  }
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  }
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  }
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  }
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  }
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F } } ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  }
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  }
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  }
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F } } ['F']
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T } } ['T', "E'"]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  }
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  }
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  }
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  }
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F } } ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  }
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  }
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  }
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F } } ['F']
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T } } ['T']
returned false  ['T'] [['T', "E'"], ['T']]
2. unmatched E } } ['E']
returned false  ['E'] [['E']]
2. unmatched EXPRESSION } } ['EXPRESSION', 'relational_operator', 'EXPRESSION']
returned false  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
2. unmatched IF_COND } } ['IF_COND']
returned false  ['IF_COND'] [['IF_COND', 'ST'], ['IF_COND']]
2. unmatched IF_COND_ST } } ['IF_COND_ST']
returned false  ['IF_COND_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['ASSIGN_ST']  with  }
in symbol ASSIGN_ST 		(in rule  ['ASSIGN_ST'] )
in producer
in match rule with  ASSIGN_ST : [['ASSIGN', 'ST'], ['ASSIGN']]
in rule  ['ASSIGN', 'ST']  with  }
in symbol ASSIGN 		(in rule  ['ASSIGN', 'ST'] )
in producer
in match rule with  ASSIGN : [['identifier', '=', 'EXPRESSION', ';']]
in rule  ['identifier', '=', 'EXPRESSION', ';']  with  }
in symbol identifier 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier', '=', 'EXPRESSION', ';'] [['identifier', '=', 'EXPRESSION', ';']]
2. unmatched ASSIGN } } ['ASSIGN', 'ST']
returned false  ['ASSIGN', 'ST'] [['ASSIGN', 'ST'], ['ASSIGN']]
in rule  ['ASSIGN']  with  }
in symbol ASSIGN 		(in rule  ['ASSIGN'] )
in producer
in match rule with  ASSIGN : [['identifier', '=', 'EXPRESSION', ';']]
in rule  ['identifier', '=', 'EXPRESSION', ';']  with  }
in symbol identifier 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier', '=', 'EXPRESSION', ';'] [['identifier', '=', 'EXPRESSION', ';']]
2. unmatched ASSIGN } } ['ASSIGN']
returned false  ['ASSIGN'] [['ASSIGN', 'ST'], ['ASSIGN']]
2. unmatched ASSIGN_ST } } ['ASSIGN_ST']
returned false  ['ASSIGN_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['DECL_ST']  with  }
in symbol DECL_ST 		(in rule  ['DECL_ST'] )
in producer
in match rule with  DECL_ST : [['DECL', 'ST'], ['DECL']]
in rule  ['DECL', 'ST']  with  }
in symbol DECL 		(in rule  ['DECL', 'ST'] )
in producer
in match rule with  DECL : [['type', 'identifier', ';']]
in rule  ['type', 'identifier', ';']  with  }
in symbol type 		(in rule  ['type', 'identifier', ';'] )
is token
in match token } punctuation type
4. unmatched token
returned false  ['type', 'identifier', ';'] [['type', 'identifier', ';']]
2. unmatched DECL } } ['DECL', 'ST']
returned false  ['DECL', 'ST'] [['DECL', 'ST'], ['DECL']]
in rule  ['DECL']  with  }
in symbol DECL 		(in rule  ['DECL'] )
in producer
in match rule with  DECL : [['type', 'identifier', ';']]
in rule  ['type', 'identifier', ';']  with  }
in symbol type 		(in rule  ['type', 'identifier', ';'] )
is token
in match token } punctuation type
4. unmatched token
returned false  ['type', 'identifier', ';'] [['type', 'identifier', ';']]
2. unmatched DECL } } ['DECL']
returned false  ['DECL'] [['DECL', 'ST'], ['DECL']]
2. unmatched DECL_ST } } ['DECL_ST']
returned false  ['DECL_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
2. unmatched STATEMENT } } ['STATEMENT', ';', 'ST']
returned false  ['STATEMENT', ';', 'ST'] [['STATEMENT', ';', 'ST'], ['STATEMENT']]
in rule  ['STATEMENT']  with  }
in symbol STATEMENT 		(in rule  ['STATEMENT'] )
in producer
in match rule with  STATEMENT : [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['FOR_LOOP_ST']  with  }
in symbol FOR_LOOP_ST 		(in rule  ['FOR_LOOP_ST'] )
in producer
in match rule with  FOR_LOOP_ST : [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
in rule  ['FOR_LOOP', 'ST']  with  }
in symbol FOR_LOOP 		(in rule  ['FOR_LOOP', 'ST'] )
in producer
in match rule with  FOR_LOOP : [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with  }
in symbol for 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else } for
5. unmatched for }
returned false  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
2. unmatched FOR_LOOP } } ['FOR_LOOP', 'ST']
returned false  ['FOR_LOOP', 'ST'] [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
in rule  ['FOR_LOOP']  with  }
in symbol FOR_LOOP 		(in rule  ['FOR_LOOP'] )
in producer
in match rule with  FOR_LOOP : [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with  }
in symbol for 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else } for
5. unmatched for }
returned false  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
2. unmatched FOR_LOOP } } ['FOR_LOOP']
returned false  ['FOR_LOOP'] [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
2. unmatched FOR_LOOP_ST } } ['FOR_LOOP_ST']
returned false  ['FOR_LOOP_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['IF_COND_ST']  with  }
in symbol IF_COND_ST 		(in rule  ['IF_COND_ST'] )
in producer
in match rule with  IF_COND_ST : [['IF_COND', 'ST'], ['IF_COND']]
in rule  ['IF_COND', 'ST']  with  }
in symbol IF_COND 		(in rule  ['IF_COND', 'ST'] )
in producer
in match rule with  IF_COND : [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with  }
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] )
else } if
5. unmatched if }
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with  }
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] )
else } if
5. unmatched if }
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']  with  }
in symbol EXPRESSION 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  }
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  }
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  }
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  }
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  }
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F } } ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  }
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  }
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  }
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F } } ['F']
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T } } ['T', "E'"]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  }
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  }
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  }
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  }
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F } } ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  }
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  }
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  }
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F } } ['F']
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T } } ['T']
returned false  ['T'] [['T', "E'"], ['T']]
2. unmatched E } } ['E']
returned false  ['E'] [['E']]
2. unmatched EXPRESSION } } ['EXPRESSION', 'relational_operator', 'EXPRESSION']
returned false  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
2. unmatched IF_COND } } ['IF_COND', 'ST']
returned false  ['IF_COND', 'ST'] [['IF_COND', 'ST'], ['IF_COND']]
in rule  ['IF_COND']  with  }
in symbol IF_COND 		(in rule  ['IF_COND'] )
in producer
in match rule with  IF_COND : [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with  }
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] )
else } if
5. unmatched if }
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with  }
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] )
else } if
5. unmatched if }
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']  with  }
in symbol EXPRESSION 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  }
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  }
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  }
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  }
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  }
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F } } ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  }
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  }
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  }
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F } } ['F']
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T } } ['T', "E'"]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  }
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  }
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  }
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  }
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F } } ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  }
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  }
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  }
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F } } ['F']
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T } } ['T']
returned false  ['T'] [['T', "E'"], ['T']]
2. unmatched E } } ['E']
returned false  ['E'] [['E']]
2. unmatched EXPRESSION } } ['EXPRESSION', 'relational_operator', 'EXPRESSION']
returned false  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
2. unmatched IF_COND } } ['IF_COND']
returned false  ['IF_COND'] [['IF_COND', 'ST'], ['IF_COND']]
2. unmatched IF_COND_ST } } ['IF_COND_ST']
returned false  ['IF_COND_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['ASSIGN_ST']  with  }
in symbol ASSIGN_ST 		(in rule  ['ASSIGN_ST'] )
in producer
in match rule with  ASSIGN_ST : [['ASSIGN', 'ST'], ['ASSIGN']]
in rule  ['ASSIGN', 'ST']  with  }
in symbol ASSIGN 		(in rule  ['ASSIGN', 'ST'] )
in producer
in match rule with  ASSIGN : [['identifier', '=', 'EXPRESSION', ';']]
in rule  ['identifier', '=', 'EXPRESSION', ';']  with  }
in symbol identifier 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier', '=', 'EXPRESSION', ';'] [['identifier', '=', 'EXPRESSION', ';']]
2. unmatched ASSIGN } } ['ASSIGN', 'ST']
returned false  ['ASSIGN', 'ST'] [['ASSIGN', 'ST'], ['ASSIGN']]
in rule  ['ASSIGN']  with  }
in symbol ASSIGN 		(in rule  ['ASSIGN'] )
in producer
in match rule with  ASSIGN : [['identifier', '=', 'EXPRESSION', ';']]
in rule  ['identifier', '=', 'EXPRESSION', ';']  with  }
in symbol identifier 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier', '=', 'EXPRESSION', ';'] [['identifier', '=', 'EXPRESSION', ';']]
2. unmatched ASSIGN } } ['ASSIGN']
returned false  ['ASSIGN'] [['ASSIGN', 'ST'], ['ASSIGN']]
2. unmatched ASSIGN_ST } } ['ASSIGN_ST']
returned false  ['ASSIGN_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['DECL_ST']  with  }
in symbol DECL_ST 		(in rule  ['DECL_ST'] )
in producer
in match rule with  DECL_ST : [['DECL', 'ST'], ['DECL']]
in rule  ['DECL', 'ST']  with  }
in symbol DECL 		(in rule  ['DECL', 'ST'] )
in producer
in match rule with  DECL : [['type', 'identifier', ';']]
in rule  ['type', 'identifier', ';']  with  }
in symbol type 		(in rule  ['type', 'identifier', ';'] )
is token
in match token } punctuation type
4. unmatched token
returned false  ['type', 'identifier', ';'] [['type', 'identifier', ';']]
2. unmatched DECL } } ['DECL', 'ST']
returned false  ['DECL', 'ST'] [['DECL', 'ST'], ['DECL']]
in rule  ['DECL']  with  }
in symbol DECL 		(in rule  ['DECL'] )
in producer
in match rule with  DECL : [['type', 'identifier', ';']]
in rule  ['type', 'identifier', ';']  with  }
in symbol type 		(in rule  ['type', 'identifier', ';'] )
is token
in match token } punctuation type
4. unmatched token
returned false  ['type', 'identifier', ';'] [['type', 'identifier', ';']]
2. unmatched DECL } } ['DECL']
returned false  ['DECL'] [['DECL', 'ST'], ['DECL']]
2. unmatched DECL_ST } } ['DECL_ST']
returned false  ['DECL_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
2. unmatched STATEMENT } } ['STATEMENT']
returned false  ['STATEMENT'] [['STATEMENT', ';', 'ST'], ['STATEMENT']]
2. unmatched STATEMENT_ST } } ['STATEMENT_ST']
returned false  ['STATEMENT_ST'] [['STATEMENT_ST']]
2. unmatched ST } } ['ASSIGN', 'ST']
returned false  ['ASSIGN', 'ST'] [['ASSIGN', 'ST'], ['ASSIGN']]
in rule  ['ASSIGN']  with  l
in symbol ASSIGN 		(in rule  ['ASSIGN'] )
in producer
in match rule with  ASSIGN : [['identifier', '=', 'EXPRESSION', ';']]
in rule  ['identifier', '=', 'EXPRESSION', ';']  with  l
in symbol identifier 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
is token
in match token l identifier identifier
matched
2. temp store = =
in symbol = 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
else = =
matched
in symbol EXPRESSION 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  5
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  5
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  5
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  5
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ; ;
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ; ^
5. unmatched ^ ;
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  5
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 5 ;
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store ; ;
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  ;
in symbol * 		(in rule  ['*', 'F', "T'"] )
else ; *
5. unmatched * ;
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  ;
in symbol / 		(in rule  ['/', 'F', "T'"] )
else ; /
5. unmatched / ;
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' ; ; ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  5
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  5
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ; ;
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ; ^
5. unmatched ^ ;
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  5
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 5 ;
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store 5 ;
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T', "E'"]
1. temp store ; ;
in symbol E' 		(in rule  ['T', "E'"] )
in producer
in match rule with  E' : [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['+', 'T', "E'"]  with  ;
in symbol + 		(in rule  ['+', 'T', "E'"] )
else ; +
5. unmatched + ;
returned false  ['+', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['-', 'T', "E'"]  with  ;
in symbol - 		(in rule  ['-', 'T', "E'"] )
else ; -
5. unmatched - ;
returned false  ['-', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
2. unmatched E' ; ; ['T', "E'"]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  5
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  5
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  5
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ; ;
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ; ^
5. unmatched ^ ;
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  5
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 5 ;
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store ; ;
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  ;
in symbol * 		(in rule  ['*', 'F', "T'"] )
else ; *
5. unmatched * ;
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  ;
in symbol / 		(in rule  ['/', 'F', "T'"] )
else ; /
5. unmatched / ;
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' ; ; ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  5
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  5
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ; ;
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ; ^
5. unmatched ^ ;
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  5
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 5 ;
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store 5 ;
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T']
1. temp store 5 ;
here we are ['T'] [['T', "E'"], ['T']] 1
1.SYMBOL in RULE E ['E']
1. temp store 5 ;
here we are ['E'] [['E']] 0
1.SYMBOL in RULE EXPRESSION ['identifier', '=', 'EXPRESSION', ';']
1. temp store ; ;
in symbol ; 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
else ; ;
matched
here we are ['identifier', '=', 'EXPRESSION', ';'] [['identifier', '=', 'EXPRESSION', ';']] 0
1.SYMBOL in RULE ASSIGN ['ASSIGN']
1. temp store l }
here we are ['ASSIGN'] [['ASSIGN', 'ST'], ['ASSIGN']] 1
1.SYMBOL in RULE ASSIGN_ST ['ASSIGN_ST']
1. temp store l }
here we are ['ASSIGN_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']] 2
1.SYMBOL in RULE STATEMENT ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']
1. temp store } }
in symbol } 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else } }
matched
here we are ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']] 0
1.SYMBOL in RULE FOR_LOOP ['FOR_LOOP', 'ST']
1. temp store eof eof
in symbol ST 		(in rule  ['FOR_LOOP', 'ST'] )
in producer
in match rule with  ST : [['STATEMENT_ST']]
in rule  ['STATEMENT_ST']  with  eof
in symbol STATEMENT_ST 		(in rule  ['STATEMENT_ST'] )
in producer
in match rule with  STATEMENT_ST : [['STATEMENT', ';', 'ST'], ['STATEMENT']]
in rule  ['STATEMENT', ';', 'ST']  with  eof
in symbol STATEMENT 		(in rule  ['STATEMENT', ';', 'ST'] )
in producer
in match rule with  STATEMENT : [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['FOR_LOOP_ST']  with  eof
in symbol FOR_LOOP_ST 		(in rule  ['FOR_LOOP_ST'] )
in producer
in match rule with  FOR_LOOP_ST : [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
in rule  ['FOR_LOOP', 'ST']  with  eof
in symbol FOR_LOOP 		(in rule  ['FOR_LOOP', 'ST'] )
in producer
in match rule with  FOR_LOOP : [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with  eof
in symbol for 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else eof for
5. unmatched for eof
returned false  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
2. unmatched FOR_LOOP eof eof ['FOR_LOOP', 'ST']
returned false  ['FOR_LOOP', 'ST'] [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
in rule  ['FOR_LOOP']  with  eof
in symbol FOR_LOOP 		(in rule  ['FOR_LOOP'] )
in producer
in match rule with  FOR_LOOP : [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with  eof
in symbol for 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else eof for
5. unmatched for eof
returned false  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
2. unmatched FOR_LOOP eof eof ['FOR_LOOP']
returned false  ['FOR_LOOP'] [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
2. unmatched FOR_LOOP_ST eof eof ['FOR_LOOP_ST']
returned false  ['FOR_LOOP_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['IF_COND_ST']  with  eof
in symbol IF_COND_ST 		(in rule  ['IF_COND_ST'] )
in producer
in match rule with  IF_COND_ST : [['IF_COND', 'ST'], ['IF_COND']]
in rule  ['IF_COND', 'ST']  with  eof
in symbol IF_COND 		(in rule  ['IF_COND', 'ST'] )
in producer
in match rule with  IF_COND : [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with  eof
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] )
else eof if
5. unmatched if eof
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with  eof
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] )
else eof if
5. unmatched if eof
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']  with  eof
in symbol EXPRESSION 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  eof
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  eof
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  eof
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  eof
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  eof
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F eof eof ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  eof
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  eof
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  eof
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F eof eof ['F']
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T eof eof ['T', "E'"]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  eof
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  eof
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  eof
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  eof
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F eof eof ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  eof
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  eof
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  eof
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F eof eof ['F']
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T eof eof ['T']
returned false  ['T'] [['T', "E'"], ['T']]
2. unmatched E eof eof ['E']
returned false  ['E'] [['E']]
2. unmatched EXPRESSION eof eof ['EXPRESSION', 'relational_operator', 'EXPRESSION']
returned false  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
2. unmatched IF_COND eof eof ['IF_COND', 'ST']
returned false  ['IF_COND', 'ST'] [['IF_COND', 'ST'], ['IF_COND']]
in rule  ['IF_COND']  with  eof
in symbol IF_COND 		(in rule  ['IF_COND'] )
in producer
in match rule with  IF_COND : [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with  eof
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] )
else eof if
5. unmatched if eof
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with  eof
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] )
else eof if
5. unmatched if eof
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']  with  eof
in symbol EXPRESSION 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  eof
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  eof
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  eof
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  eof
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  eof
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F eof eof ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  eof
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  eof
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  eof
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F eof eof ['F']
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T eof eof ['T', "E'"]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  eof
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  eof
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  eof
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  eof
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F eof eof ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  eof
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  eof
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  eof
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F eof eof ['F']
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T eof eof ['T']
returned false  ['T'] [['T', "E'"], ['T']]
2. unmatched E eof eof ['E']
returned false  ['E'] [['E']]
2. unmatched EXPRESSION eof eof ['EXPRESSION', 'relational_operator', 'EXPRESSION']
returned false  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
2. unmatched IF_COND eof eof ['IF_COND']
returned false  ['IF_COND'] [['IF_COND', 'ST'], ['IF_COND']]
2. unmatched IF_COND_ST eof eof ['IF_COND_ST']
returned false  ['IF_COND_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['ASSIGN_ST']  with  eof
in symbol ASSIGN_ST 		(in rule  ['ASSIGN_ST'] )
in producer
in match rule with  ASSIGN_ST : [['ASSIGN', 'ST'], ['ASSIGN']]
in rule  ['ASSIGN', 'ST']  with  eof
in symbol ASSIGN 		(in rule  ['ASSIGN', 'ST'] )
in producer
in match rule with  ASSIGN : [['identifier', '=', 'EXPRESSION', ';']]
in rule  ['identifier', '=', 'EXPRESSION', ';']  with  eof
in symbol identifier 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier', '=', 'EXPRESSION', ';'] [['identifier', '=', 'EXPRESSION', ';']]
2. unmatched ASSIGN eof eof ['ASSIGN', 'ST']
returned false  ['ASSIGN', 'ST'] [['ASSIGN', 'ST'], ['ASSIGN']]
in rule  ['ASSIGN']  with  eof
in symbol ASSIGN 		(in rule  ['ASSIGN'] )
in producer
in match rule with  ASSIGN : [['identifier', '=', 'EXPRESSION', ';']]
in rule  ['identifier', '=', 'EXPRESSION', ';']  with  eof
in symbol identifier 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier', '=', 'EXPRESSION', ';'] [['identifier', '=', 'EXPRESSION', ';']]
2. unmatched ASSIGN eof eof ['ASSIGN']
returned false  ['ASSIGN'] [['ASSIGN', 'ST'], ['ASSIGN']]
2. unmatched ASSIGN_ST eof eof ['ASSIGN_ST']
returned false  ['ASSIGN_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['DECL_ST']  with  eof
in symbol DECL_ST 		(in rule  ['DECL_ST'] )
in producer
in match rule with  DECL_ST : [['DECL', 'ST'], ['DECL']]
in rule  ['DECL', 'ST']  with  eof
in symbol DECL 		(in rule  ['DECL', 'ST'] )
in producer
in match rule with  DECL : [['type', 'identifier', ';']]
in rule  ['type', 'identifier', ';']  with  eof
in symbol type 		(in rule  ['type', 'identifier', ';'] )
is token
in match token eof eof type
4. unmatched token
returned false  ['type', 'identifier', ';'] [['type', 'identifier', ';']]
2. unmatched DECL eof eof ['DECL', 'ST']
returned false  ['DECL', 'ST'] [['DECL', 'ST'], ['DECL']]
in rule  ['DECL']  with  eof
in symbol DECL 		(in rule  ['DECL'] )
in producer
in match rule with  DECL : [['type', 'identifier', ';']]
in rule  ['type', 'identifier', ';']  with  eof
in symbol type 		(in rule  ['type', 'identifier', ';'] )
is token
in match token eof eof type
4. unmatched token
returned false  ['type', 'identifier', ';'] [['type', 'identifier', ';']]
2. unmatched DECL eof eof ['DECL']
returned false  ['DECL'] [['DECL', 'ST'], ['DECL']]
2. unmatched DECL_ST eof eof ['DECL_ST']
returned false  ['DECL_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
2. unmatched STATEMENT eof eof ['STATEMENT', ';', 'ST']
returned false  ['STATEMENT', ';', 'ST'] [['STATEMENT', ';', 'ST'], ['STATEMENT']]
in rule  ['STATEMENT']  with  eof
in symbol STATEMENT 		(in rule  ['STATEMENT'] )
in producer
in match rule with  STATEMENT : [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['FOR_LOOP_ST']  with  eof
in symbol FOR_LOOP_ST 		(in rule  ['FOR_LOOP_ST'] )
in producer
in match rule with  FOR_LOOP_ST : [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
in rule  ['FOR_LOOP', 'ST']  with  eof
in symbol FOR_LOOP 		(in rule  ['FOR_LOOP', 'ST'] )
in producer
in match rule with  FOR_LOOP : [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with  eof
in symbol for 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else eof for
5. unmatched for eof
returned false  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
2. unmatched FOR_LOOP eof eof ['FOR_LOOP', 'ST']
returned false  ['FOR_LOOP', 'ST'] [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
in rule  ['FOR_LOOP']  with  eof
in symbol FOR_LOOP 		(in rule  ['FOR_LOOP'] )
in producer
in match rule with  FOR_LOOP : [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with  eof
in symbol for 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else eof for
5. unmatched for eof
returned false  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
2. unmatched FOR_LOOP eof eof ['FOR_LOOP']
returned false  ['FOR_LOOP'] [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
2. unmatched FOR_LOOP_ST eof eof ['FOR_LOOP_ST']
returned false  ['FOR_LOOP_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['IF_COND_ST']  with  eof
in symbol IF_COND_ST 		(in rule  ['IF_COND_ST'] )
in producer
in match rule with  IF_COND_ST : [['IF_COND', 'ST'], ['IF_COND']]
in rule  ['IF_COND', 'ST']  with  eof
in symbol IF_COND 		(in rule  ['IF_COND', 'ST'] )
in producer
in match rule with  IF_COND : [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with  eof
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] )
else eof if
5. unmatched if eof
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with  eof
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] )
else eof if
5. unmatched if eof
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']  with  eof
in symbol EXPRESSION 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  eof
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  eof
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  eof
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  eof
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  eof
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F eof eof ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  eof
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  eof
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  eof
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F eof eof ['F']
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T eof eof ['T', "E'"]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  eof
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  eof
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  eof
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  eof
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F eof eof ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  eof
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  eof
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  eof
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F eof eof ['F']
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T eof eof ['T']
returned false  ['T'] [['T', "E'"], ['T']]
2. unmatched E eof eof ['E']
returned false  ['E'] [['E']]
2. unmatched EXPRESSION eof eof ['EXPRESSION', 'relational_operator', 'EXPRESSION']
returned false  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
2. unmatched IF_COND eof eof ['IF_COND', 'ST']
returned false  ['IF_COND', 'ST'] [['IF_COND', 'ST'], ['IF_COND']]
in rule  ['IF_COND']  with  eof
in symbol IF_COND 		(in rule  ['IF_COND'] )
in producer
in match rule with  IF_COND : [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with  eof
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] )
else eof if
5. unmatched if eof
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with  eof
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] )
else eof if
5. unmatched if eof
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']  with  eof
in symbol EXPRESSION 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  eof
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  eof
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  eof
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  eof
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  eof
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F eof eof ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  eof
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  eof
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  eof
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F eof eof ['F']
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T eof eof ['T', "E'"]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  eof
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  eof
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  eof
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  eof
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F eof eof ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  eof
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  eof
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  eof
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  eof
in symbol ( 		(in rule  ['(', 'E', ')'] )
else eof (
5. unmatched ( eof
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  eof
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  eof
in symbol number 		(in rule  ['number'] )
is token
in match token eof eof number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G eof eof ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F eof eof ['F']
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T eof eof ['T']
returned false  ['T'] [['T', "E'"], ['T']]
2. unmatched E eof eof ['E']
returned false  ['E'] [['E']]
2. unmatched EXPRESSION eof eof ['EXPRESSION', 'relational_operator', 'EXPRESSION']
returned false  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
2. unmatched IF_COND eof eof ['IF_COND']
returned false  ['IF_COND'] [['IF_COND', 'ST'], ['IF_COND']]
2. unmatched IF_COND_ST eof eof ['IF_COND_ST']
returned false  ['IF_COND_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['ASSIGN_ST']  with  eof
in symbol ASSIGN_ST 		(in rule  ['ASSIGN_ST'] )
in producer
in match rule with  ASSIGN_ST : [['ASSIGN', 'ST'], ['ASSIGN']]
in rule  ['ASSIGN', 'ST']  with  eof
in symbol ASSIGN 		(in rule  ['ASSIGN', 'ST'] )
in producer
in match rule with  ASSIGN : [['identifier', '=', 'EXPRESSION', ';']]
in rule  ['identifier', '=', 'EXPRESSION', ';']  with  eof
in symbol identifier 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier', '=', 'EXPRESSION', ';'] [['identifier', '=', 'EXPRESSION', ';']]
2. unmatched ASSIGN eof eof ['ASSIGN', 'ST']
returned false  ['ASSIGN', 'ST'] [['ASSIGN', 'ST'], ['ASSIGN']]
in rule  ['ASSIGN']  with  eof
in symbol ASSIGN 		(in rule  ['ASSIGN'] )
in producer
in match rule with  ASSIGN : [['identifier', '=', 'EXPRESSION', ';']]
in rule  ['identifier', '=', 'EXPRESSION', ';']  with  eof
in symbol identifier 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
is token
in match token eof eof identifier
4. unmatched token
returned false  ['identifier', '=', 'EXPRESSION', ';'] [['identifier', '=', 'EXPRESSION', ';']]
2. unmatched ASSIGN eof eof ['ASSIGN']
returned false  ['ASSIGN'] [['ASSIGN', 'ST'], ['ASSIGN']]
2. unmatched ASSIGN_ST eof eof ['ASSIGN_ST']
returned false  ['ASSIGN_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['DECL_ST']  with  eof
in symbol DECL_ST 		(in rule  ['DECL_ST'] )
in producer
in match rule with  DECL_ST : [['DECL', 'ST'], ['DECL']]
in rule  ['DECL', 'ST']  with  eof
in symbol DECL 		(in rule  ['DECL', 'ST'] )
in producer
in match rule with  DECL : [['type', 'identifier', ';']]
in rule  ['type', 'identifier', ';']  with  eof
in symbol type 		(in rule  ['type', 'identifier', ';'] )
is token
in match token eof eof type
4. unmatched token
returned false  ['type', 'identifier', ';'] [['type', 'identifier', ';']]
2. unmatched DECL eof eof ['DECL', 'ST']
returned false  ['DECL', 'ST'] [['DECL', 'ST'], ['DECL']]
in rule  ['DECL']  with  eof
in symbol DECL 		(in rule  ['DECL'] )
in producer
in match rule with  DECL : [['type', 'identifier', ';']]
in rule  ['type', 'identifier', ';']  with  eof
in symbol type 		(in rule  ['type', 'identifier', ';'] )
is token
in match token eof eof type
4. unmatched token
returned false  ['type', 'identifier', ';'] [['type', 'identifier', ';']]
2. unmatched DECL eof eof ['DECL']
returned false  ['DECL'] [['DECL', 'ST'], ['DECL']]
2. unmatched DECL_ST eof eof ['DECL_ST']
returned false  ['DECL_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
2. unmatched STATEMENT eof eof ['STATEMENT']
returned false  ['STATEMENT'] [['STATEMENT', ';', 'ST'], ['STATEMENT']]
2. unmatched STATEMENT_ST eof eof ['STATEMENT_ST']
returned false  ['STATEMENT_ST'] [['STATEMENT_ST']]
2. unmatched ST eof eof ['FOR_LOOP', 'ST']
returned false  ['FOR_LOOP', 'ST'] [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
in rule  ['FOR_LOOP']  with  for
in symbol FOR_LOOP 		(in rule  ['FOR_LOOP'] )
in producer
in match rule with  FOR_LOOP : [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with  for
in symbol for 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else for for
matched
in symbol ( 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else ( (
matched
in symbol ASSIGN 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
in producer
in match rule with  ASSIGN : [['identifier', '=', 'EXPRESSION', ';']]
in rule  ['identifier', '=', 'EXPRESSION', ';']  with  i
in symbol identifier 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
is token
in match token i identifier identifier
matched
2. temp store = =
in symbol = 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
else = =
matched
in symbol EXPRESSION 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  0
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  0
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  0
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  0
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  0
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 0 (
5. unmatched ( 0
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  0
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 0 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  0
in symbol number 		(in rule  ['number'] )
is token
in match token 0 number number
matched
2. temp store 0 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ; ;
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ; ^
5. unmatched ^ ;
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  0
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  0
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 0 (
5. unmatched ( 0
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  0
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 0 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  0
in symbol number 		(in rule  ['number'] )
is token
in match token 0 number number
matched
2. temp store 0 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 0 ;
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store ; ;
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  ;
in symbol * 		(in rule  ['*', 'F', "T'"] )
else ; *
5. unmatched * ;
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  ;
in symbol / 		(in rule  ['/', 'F', "T'"] )
else ; /
5. unmatched / ;
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' ; ; ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  0
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  0
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  0
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 0 (
5. unmatched ( 0
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  0
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 0 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  0
in symbol number 		(in rule  ['number'] )
is token
in match token 0 number number
matched
2. temp store 0 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ; ;
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ; ^
5. unmatched ^ ;
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  0
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  0
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 0 (
5. unmatched ( 0
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  0
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 0 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  0
in symbol number 		(in rule  ['number'] )
is token
in match token 0 number number
matched
2. temp store 0 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 0 ;
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store 0 ;
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T', "E'"]
1. temp store ; ;
in symbol E' 		(in rule  ['T', "E'"] )
in producer
in match rule with  E' : [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['+', 'T', "E'"]  with  ;
in symbol + 		(in rule  ['+', 'T', "E'"] )
else ; +
5. unmatched + ;
returned false  ['+', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['-', 'T', "E'"]  with  ;
in symbol - 		(in rule  ['-', 'T', "E'"] )
else ; -
5. unmatched - ;
returned false  ['-', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
2. unmatched E' ; ; ['T', "E'"]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  0
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  0
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  0
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  0
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 0 (
5. unmatched ( 0
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  0
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 0 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  0
in symbol number 		(in rule  ['number'] )
is token
in match token 0 number number
matched
2. temp store 0 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ; ;
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ; ^
5. unmatched ^ ;
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  0
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  0
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 0 (
5. unmatched ( 0
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  0
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 0 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  0
in symbol number 		(in rule  ['number'] )
is token
in match token 0 number number
matched
2. temp store 0 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 0 ;
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store ; ;
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  ;
in symbol * 		(in rule  ['*', 'F', "T'"] )
else ; *
5. unmatched * ;
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  ;
in symbol / 		(in rule  ['/', 'F', "T'"] )
else ; /
5. unmatched / ;
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' ; ; ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  0
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  0
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  0
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 0 (
5. unmatched ( 0
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  0
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 0 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  0
in symbol number 		(in rule  ['number'] )
is token
in match token 0 number number
matched
2. temp store 0 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ; ;
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ; ^
5. unmatched ^ ;
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  0
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  0
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 0 (
5. unmatched ( 0
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  0
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 0 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  0
in symbol number 		(in rule  ['number'] )
is token
in match token 0 number number
matched
2. temp store 0 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 0 ;
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store 0 ;
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T']
1. temp store 0 ;
here we are ['T'] [['T', "E'"], ['T']] 1
1.SYMBOL in RULE E ['E']
1. temp store 0 ;
here we are ['E'] [['E']] 0
1.SYMBOL in RULE EXPRESSION ['identifier', '=', 'EXPRESSION', ';']
1. temp store ; ;
in symbol ; 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
else ; ;
matched
here we are ['identifier', '=', 'EXPRESSION', ';'] [['identifier', '=', 'EXPRESSION', ';']] 0
1.SYMBOL in RULE ASSIGN ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']
1. temp store j j
in symbol COND 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
in producer
in match rule with  COND : [['EXPRESSION', 'relational_operator', 'EXPRESSION', ';']]
in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION', ';']  with  j
in symbol EXPRESSION 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION', ';'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  j
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  j
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  j
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  j
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  j
in symbol ( 		(in rule  ['(', 'E', ')'] )
else j (
5. unmatched ( j
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  j
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token j identifier identifier
matched
2. temp store j <
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store < <
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else < ^
5. unmatched ^ <
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  j
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  j
in symbol ( 		(in rule  ['(', 'E', ')'] )
else j (
5. unmatched ( j
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  j
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token j identifier identifier
matched
2. temp store j <
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G']
1. temp store j <
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store < <
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  <
in symbol * 		(in rule  ['*', 'F', "T'"] )
else < *
5. unmatched * <
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  <
in symbol / 		(in rule  ['/', 'F', "T'"] )
else < /
5. unmatched / <
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' < < ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  j
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  j
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  j
in symbol ( 		(in rule  ['(', 'E', ')'] )
else j (
5. unmatched ( j
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  j
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token j identifier identifier
matched
2. temp store j <
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store < <
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else < ^
5. unmatched ^ <
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  j
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  j
in symbol ( 		(in rule  ['(', 'E', ')'] )
else j (
5. unmatched ( j
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  j
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token j identifier identifier
matched
2. temp store j <
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G']
1. temp store j <
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store j <
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T', "E'"]
1. temp store < <
in symbol E' 		(in rule  ['T', "E'"] )
in producer
in match rule with  E' : [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['+', 'T', "E'"]  with  <
in symbol + 		(in rule  ['+', 'T', "E'"] )
else < +
5. unmatched + <
returned false  ['+', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['-', 'T', "E'"]  with  <
in symbol - 		(in rule  ['-', 'T', "E'"] )
else < -
5. unmatched - <
returned false  ['-', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
2. unmatched E' < < ['T', "E'"]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  j
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  j
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  j
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  j
in symbol ( 		(in rule  ['(', 'E', ')'] )
else j (
5. unmatched ( j
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  j
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token j identifier identifier
matched
2. temp store j <
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store < <
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else < ^
5. unmatched ^ <
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  j
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  j
in symbol ( 		(in rule  ['(', 'E', ')'] )
else j (
5. unmatched ( j
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  j
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token j identifier identifier
matched
2. temp store j <
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G']
1. temp store j <
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store < <
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  <
in symbol * 		(in rule  ['*', 'F', "T'"] )
else < *
5. unmatched * <
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  <
in symbol / 		(in rule  ['/', 'F', "T'"] )
else < /
5. unmatched / <
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' < < ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  j
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  j
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  j
in symbol ( 		(in rule  ['(', 'E', ')'] )
else j (
5. unmatched ( j
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  j
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token j identifier identifier
matched
2. temp store j <
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store < <
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else < ^
5. unmatched ^ <
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  j
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  j
in symbol ( 		(in rule  ['(', 'E', ')'] )
else j (
5. unmatched ( j
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  j
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token j identifier identifier
matched
2. temp store j <
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G']
1. temp store j <
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store j <
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T']
1. temp store j <
here we are ['T'] [['T', "E'"], ['T']] 1
1.SYMBOL in RULE E ['E']
1. temp store j <
here we are ['E'] [['E']] 0
1.SYMBOL in RULE EXPRESSION ['EXPRESSION', 'relational_operator', 'EXPRESSION', ';']
1. temp store < <
in symbol relational_operator 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION', ';'] )
is token
in match token < relational_operator relational_operator
matched
2. temp store 10 10
in symbol EXPRESSION 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION', ';'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  10
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  10
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  10
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  10
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  10
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 10 (
5. unmatched ( 10
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  10
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 10 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  10
in symbol number 		(in rule  ['number'] )
is token
in match token 10 number number
matched
2. temp store 10 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ; ;
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ; ^
5. unmatched ^ ;
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  10
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  10
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 10 (
5. unmatched ( 10
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  10
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 10 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  10
in symbol number 		(in rule  ['number'] )
is token
in match token 10 number number
matched
2. temp store 10 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 10 ;
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store ; ;
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  ;
in symbol * 		(in rule  ['*', 'F', "T'"] )
else ; *
5. unmatched * ;
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  ;
in symbol / 		(in rule  ['/', 'F', "T'"] )
else ; /
5. unmatched / ;
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' ; ; ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  10
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  10
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  10
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 10 (
5. unmatched ( 10
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  10
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 10 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  10
in symbol number 		(in rule  ['number'] )
is token
in match token 10 number number
matched
2. temp store 10 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ; ;
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ; ^
5. unmatched ^ ;
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  10
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  10
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 10 (
5. unmatched ( 10
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  10
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 10 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  10
in symbol number 		(in rule  ['number'] )
is token
in match token 10 number number
matched
2. temp store 10 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 10 ;
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store 10 ;
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T', "E'"]
1. temp store ; ;
in symbol E' 		(in rule  ['T', "E'"] )
in producer
in match rule with  E' : [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['+', 'T', "E'"]  with  ;
in symbol + 		(in rule  ['+', 'T', "E'"] )
else ; +
5. unmatched + ;
returned false  ['+', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['-', 'T', "E'"]  with  ;
in symbol - 		(in rule  ['-', 'T', "E'"] )
else ; -
5. unmatched - ;
returned false  ['-', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
2. unmatched E' ; ; ['T', "E'"]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  10
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  10
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  10
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  10
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 10 (
5. unmatched ( 10
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  10
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 10 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  10
in symbol number 		(in rule  ['number'] )
is token
in match token 10 number number
matched
2. temp store 10 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ; ;
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ; ^
5. unmatched ^ ;
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  10
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  10
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 10 (
5. unmatched ( 10
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  10
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 10 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  10
in symbol number 		(in rule  ['number'] )
is token
in match token 10 number number
matched
2. temp store 10 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 10 ;
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store ; ;
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  ;
in symbol * 		(in rule  ['*', 'F', "T'"] )
else ; *
5. unmatched * ;
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  ;
in symbol / 		(in rule  ['/', 'F', "T'"] )
else ; /
5. unmatched / ;
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' ; ; ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  10
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  10
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  10
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 10 (
5. unmatched ( 10
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  10
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 10 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  10
in symbol number 		(in rule  ['number'] )
is token
in match token 10 number number
matched
2. temp store 10 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ; ;
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ; ^
5. unmatched ^ ;
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  10
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  10
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 10 (
5. unmatched ( 10
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  10
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 10 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  10
in symbol number 		(in rule  ['number'] )
is token
in match token 10 number number
matched
2. temp store 10 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 10 ;
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store 10 ;
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T']
1. temp store 10 ;
here we are ['T'] [['T', "E'"], ['T']] 1
1.SYMBOL in RULE E ['E']
1. temp store 10 ;
here we are ['E'] [['E']] 0
1.SYMBOL in RULE EXPRESSION ['EXPRESSION', 'relational_operator', 'EXPRESSION', ';']
1. temp store ; ;
in symbol ; 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION', ';'] )
else ; ;
matched
here we are ['EXPRESSION', 'relational_operator', 'EXPRESSION', ';'] [['EXPRESSION', 'relational_operator', 'EXPRESSION', ';']] 0
1.SYMBOL in RULE COND ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']
1. temp store k k
in symbol INCREMENT 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
in producer
in match rule with  INCREMENT : [['I_ASSIGN'], ['I_COND'], ['EXPRESSION']]
in rule  ['I_ASSIGN']  with  k
in symbol I_ASSIGN 		(in rule  ['I_ASSIGN'] )
in producer
in match rule with  I_ASSIGN : [['identifier', '=', 'EXPRESSION']]
in rule  ['identifier', '=', 'EXPRESSION']  with  k
in symbol identifier 		(in rule  ['identifier', '=', 'EXPRESSION'] )
is token
in match token k identifier identifier
matched
2. temp store = =
in symbol = 		(in rule  ['identifier', '=', 'EXPRESSION'] )
else = =
matched
in symbol EXPRESSION 		(in rule  ['identifier', '=', 'EXPRESSION'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  5
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  5
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  5
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  5
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 )
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ) )
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ) ^
5. unmatched ^ )
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  5
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 )
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 5 )
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store ) )
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  )
in symbol * 		(in rule  ['*', 'F', "T'"] )
else ) *
5. unmatched * )
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  )
in symbol / 		(in rule  ['/', 'F', "T'"] )
else ) /
5. unmatched / )
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' ) ) ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  5
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  5
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 )
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ) )
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ) ^
5. unmatched ^ )
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  5
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 )
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 5 )
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store 5 )
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T', "E'"]
1. temp store ) )
in symbol E' 		(in rule  ['T', "E'"] )
in producer
in match rule with  E' : [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['+', 'T', "E'"]  with  )
in symbol + 		(in rule  ['+', 'T', "E'"] )
else ) +
5. unmatched + )
returned false  ['+', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['-', 'T', "E'"]  with  )
in symbol - 		(in rule  ['-', 'T', "E'"] )
else ) -
5. unmatched - )
returned false  ['-', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
2. unmatched E' ) ) ['T', "E'"]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  5
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  5
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  5
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 )
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ) )
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ) ^
5. unmatched ^ )
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  5
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 )
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 5 )
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store ) )
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  )
in symbol * 		(in rule  ['*', 'F', "T'"] )
else ) *
5. unmatched * )
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  )
in symbol / 		(in rule  ['/', 'F', "T'"] )
else ) /
5. unmatched / )
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' ) ) ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  5
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  5
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 )
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ) )
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ) ^
5. unmatched ^ )
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  5
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 )
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 5 )
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store 5 )
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T']
1. temp store 5 )
here we are ['T'] [['T', "E'"], ['T']] 1
1.SYMBOL in RULE E ['E']
1. temp store 5 )
here we are ['E'] [['E']] 0
1.SYMBOL in RULE EXPRESSION ['identifier', '=', 'EXPRESSION']
1. temp store 5 )
here we are ['identifier', '=', 'EXPRESSION'] [['identifier', '=', 'EXPRESSION']] 0
1.SYMBOL in RULE I_ASSIGN ['I_ASSIGN']
1. temp store k )
here we are ['I_ASSIGN'] [['I_ASSIGN'], ['I_COND'], ['EXPRESSION']] 0
1.SYMBOL in RULE INCREMENT ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']
1. temp store ) )
in symbol ) 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else ) )
matched
in symbol { 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else { {
matched
in symbol STATEMENT 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
in producer
in match rule with  STATEMENT : [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['FOR_LOOP_ST']  with  l
in symbol FOR_LOOP_ST 		(in rule  ['FOR_LOOP_ST'] )
in producer
in match rule with  FOR_LOOP_ST : [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
in rule  ['FOR_LOOP', 'ST']  with  l
in symbol FOR_LOOP 		(in rule  ['FOR_LOOP', 'ST'] )
in producer
in match rule with  FOR_LOOP : [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with  l
in symbol for 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else l for
5. unmatched for l
returned false  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
2. unmatched FOR_LOOP l l ['FOR_LOOP', 'ST']
returned false  ['FOR_LOOP', 'ST'] [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
in rule  ['FOR_LOOP']  with  l
in symbol FOR_LOOP 		(in rule  ['FOR_LOOP'] )
in producer
in match rule with  FOR_LOOP : [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with  l
in symbol for 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else l for
5. unmatched for l
returned false  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
2. unmatched FOR_LOOP l l ['FOR_LOOP']
returned false  ['FOR_LOOP'] [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
2. unmatched FOR_LOOP_ST l l ['FOR_LOOP_ST']
returned false  ['FOR_LOOP_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['IF_COND_ST']  with  l
in symbol IF_COND_ST 		(in rule  ['IF_COND_ST'] )
in producer
in match rule with  IF_COND_ST : [['IF_COND', 'ST'], ['IF_COND']]
in rule  ['IF_COND', 'ST']  with  l
in symbol IF_COND 		(in rule  ['IF_COND', 'ST'] )
in producer
in match rule with  IF_COND : [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with  l
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] )
else l if
5. unmatched if l
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with  l
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] )
else l if
5. unmatched if l
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']  with  l
in symbol EXPRESSION 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  l
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  l
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  l
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  l
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  l
in symbol ( 		(in rule  ['(', 'E', ')'] )
else l (
5. unmatched ( l
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  l
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token l identifier identifier
matched
2. temp store l =
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store = =
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else = ^
5. unmatched ^ =
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  l
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  l
in symbol ( 		(in rule  ['(', 'E', ')'] )
else l (
5. unmatched ( l
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  l
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token l identifier identifier
matched
2. temp store l =
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G']
1. temp store l =
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store = =
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  =
in symbol * 		(in rule  ['*', 'F', "T'"] )
else = *
5. unmatched * =
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  =
in symbol / 		(in rule  ['/', 'F', "T'"] )
else = /
5. unmatched / =
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' = = ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  l
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  l
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  l
in symbol ( 		(in rule  ['(', 'E', ')'] )
else l (
5. unmatched ( l
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  l
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token l identifier identifier
matched
2. temp store l =
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store = =
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else = ^
5. unmatched ^ =
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  l
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  l
in symbol ( 		(in rule  ['(', 'E', ')'] )
else l (
5. unmatched ( l
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  l
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token l identifier identifier
matched
2. temp store l =
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G']
1. temp store l =
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store l =
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T', "E'"]
1. temp store = =
in symbol E' 		(in rule  ['T', "E'"] )
in producer
in match rule with  E' : [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['+', 'T', "E'"]  with  =
in symbol + 		(in rule  ['+', 'T', "E'"] )
else = +
5. unmatched + =
returned false  ['+', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['-', 'T', "E'"]  with  =
in symbol - 		(in rule  ['-', 'T', "E'"] )
else = -
5. unmatched - =
returned false  ['-', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
2. unmatched E' = = ['T', "E'"]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  l
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  l
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  l
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  l
in symbol ( 		(in rule  ['(', 'E', ')'] )
else l (
5. unmatched ( l
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  l
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token l identifier identifier
matched
2. temp store l =
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store = =
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else = ^
5. unmatched ^ =
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  l
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  l
in symbol ( 		(in rule  ['(', 'E', ')'] )
else l (
5. unmatched ( l
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  l
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token l identifier identifier
matched
2. temp store l =
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G']
1. temp store l =
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store = =
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  =
in symbol * 		(in rule  ['*', 'F', "T'"] )
else = *
5. unmatched * =
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  =
in symbol / 		(in rule  ['/', 'F', "T'"] )
else = /
5. unmatched / =
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' = = ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  l
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  l
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  l
in symbol ( 		(in rule  ['(', 'E', ')'] )
else l (
5. unmatched ( l
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  l
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token l identifier identifier
matched
2. temp store l =
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store = =
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else = ^
5. unmatched ^ =
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  l
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  l
in symbol ( 		(in rule  ['(', 'E', ')'] )
else l (
5. unmatched ( l
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  l
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token l identifier identifier
matched
2. temp store l =
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G']
1. temp store l =
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store l =
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T']
1. temp store l =
here we are ['T'] [['T', "E'"], ['T']] 1
1.SYMBOL in RULE E ['E']
1. temp store l =
here we are ['E'] [['E']] 0
1.SYMBOL in RULE EXPRESSION ['EXPRESSION', 'relational_operator', 'EXPRESSION']
1. temp store l =
in symbol relational_operator 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] )
is token
in match token l identifier relational_operator
4. unmatched token
returned false  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
2. unmatched IF_COND l = ['IF_COND', 'ST']
returned false  ['IF_COND', 'ST'] [['IF_COND', 'ST'], ['IF_COND']]
in rule  ['IF_COND']  with  l
in symbol IF_COND 		(in rule  ['IF_COND'] )
in producer
in match rule with  IF_COND : [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with  l
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] )
else l if
5. unmatched if l
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with  l
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] )
else l if
5. unmatched if l
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']  with  l
in symbol EXPRESSION 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  l
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  l
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  l
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  l
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  l
in symbol ( 		(in rule  ['(', 'E', ')'] )
else l (
5. unmatched ( l
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  l
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token l identifier identifier
matched
2. temp store l =
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store = =
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else = ^
5. unmatched ^ =
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  l
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  l
in symbol ( 		(in rule  ['(', 'E', ')'] )
else l (
5. unmatched ( l
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  l
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token l identifier identifier
matched
2. temp store l =
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G']
1. temp store l =
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store = =
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  =
in symbol * 		(in rule  ['*', 'F', "T'"] )
else = *
5. unmatched * =
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  =
in symbol / 		(in rule  ['/', 'F', "T'"] )
else = /
5. unmatched / =
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' = = ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  l
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  l
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  l
in symbol ( 		(in rule  ['(', 'E', ')'] )
else l (
5. unmatched ( l
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  l
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token l identifier identifier
matched
2. temp store l =
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store = =
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else = ^
5. unmatched ^ =
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  l
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  l
in symbol ( 		(in rule  ['(', 'E', ')'] )
else l (
5. unmatched ( l
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  l
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token l identifier identifier
matched
2. temp store l =
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G']
1. temp store l =
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store l =
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T', "E'"]
1. temp store = =
in symbol E' 		(in rule  ['T', "E'"] )
in producer
in match rule with  E' : [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['+', 'T', "E'"]  with  =
in symbol + 		(in rule  ['+', 'T', "E'"] )
else = +
5. unmatched + =
returned false  ['+', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['-', 'T', "E'"]  with  =
in symbol - 		(in rule  ['-', 'T', "E'"] )
else = -
5. unmatched - =
returned false  ['-', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
2. unmatched E' = = ['T', "E'"]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  l
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  l
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  l
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  l
in symbol ( 		(in rule  ['(', 'E', ')'] )
else l (
5. unmatched ( l
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  l
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token l identifier identifier
matched
2. temp store l =
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store = =
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else = ^
5. unmatched ^ =
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  l
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  l
in symbol ( 		(in rule  ['(', 'E', ')'] )
else l (
5. unmatched ( l
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  l
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token l identifier identifier
matched
2. temp store l =
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G']
1. temp store l =
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store = =
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  =
in symbol * 		(in rule  ['*', 'F', "T'"] )
else = *
5. unmatched * =
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  =
in symbol / 		(in rule  ['/', 'F', "T'"] )
else = /
5. unmatched / =
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' = = ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  l
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  l
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  l
in symbol ( 		(in rule  ['(', 'E', ')'] )
else l (
5. unmatched ( l
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  l
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token l identifier identifier
matched
2. temp store l =
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store = =
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else = ^
5. unmatched ^ =
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  l
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  l
in symbol ( 		(in rule  ['(', 'E', ')'] )
else l (
5. unmatched ( l
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  l
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token l identifier identifier
matched
2. temp store l =
here we are ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']] 1
1.SYMBOL in RULE G ['G']
1. temp store l =
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store l =
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T']
1. temp store l =
here we are ['T'] [['T', "E'"], ['T']] 1
1.SYMBOL in RULE E ['E']
1. temp store l =
here we are ['E'] [['E']] 0
1.SYMBOL in RULE EXPRESSION ['EXPRESSION', 'relational_operator', 'EXPRESSION']
1. temp store l =
in symbol relational_operator 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] )
is token
in match token l identifier relational_operator
4. unmatched token
returned false  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
2. unmatched IF_COND l = ['IF_COND']
returned false  ['IF_COND'] [['IF_COND', 'ST'], ['IF_COND']]
2. unmatched IF_COND_ST l = ['IF_COND_ST']
returned false  ['IF_COND_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['ASSIGN_ST']  with  l
in symbol ASSIGN_ST 		(in rule  ['ASSIGN_ST'] )
in producer
in match rule with  ASSIGN_ST : [['ASSIGN', 'ST'], ['ASSIGN']]
in rule  ['ASSIGN', 'ST']  with  l
in symbol ASSIGN 		(in rule  ['ASSIGN', 'ST'] )
in producer
in match rule with  ASSIGN : [['identifier', '=', 'EXPRESSION', ';']]
in rule  ['identifier', '=', 'EXPRESSION', ';']  with  l
in symbol identifier 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
is token
in match token l identifier identifier
matched
2. temp store = =
in symbol = 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
else = =
matched
in symbol EXPRESSION 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  5
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  5
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  5
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  5
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ; ;
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ; ^
5. unmatched ^ ;
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  5
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 5 ;
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store ; ;
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  ;
in symbol * 		(in rule  ['*', 'F', "T'"] )
else ; *
5. unmatched * ;
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  ;
in symbol / 		(in rule  ['/', 'F', "T'"] )
else ; /
5. unmatched / ;
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' ; ; ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  5
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  5
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ; ;
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ; ^
5. unmatched ^ ;
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  5
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 5 ;
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store 5 ;
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T', "E'"]
1. temp store ; ;
in symbol E' 		(in rule  ['T', "E'"] )
in producer
in match rule with  E' : [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['+', 'T', "E'"]  with  ;
in symbol + 		(in rule  ['+', 'T', "E'"] )
else ; +
5. unmatched + ;
returned false  ['+', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['-', 'T', "E'"]  with  ;
in symbol - 		(in rule  ['-', 'T', "E'"] )
else ; -
5. unmatched - ;
returned false  ['-', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
2. unmatched E' ; ; ['T', "E'"]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  5
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  5
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  5
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ; ;
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ; ^
5. unmatched ^ ;
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  5
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 5 ;
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store ; ;
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  ;
in symbol * 		(in rule  ['*', 'F', "T'"] )
else ; *
5. unmatched * ;
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  ;
in symbol / 		(in rule  ['/', 'F', "T'"] )
else ; /
5. unmatched / ;
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' ; ; ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  5
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  5
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ; ;
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ; ^
5. unmatched ^ ;
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  5
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 5 ;
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store 5 ;
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T']
1. temp store 5 ;
here we are ['T'] [['T', "E'"], ['T']] 1
1.SYMBOL in RULE E ['E']
1. temp store 5 ;
here we are ['E'] [['E']] 0
1.SYMBOL in RULE EXPRESSION ['identifier', '=', 'EXPRESSION', ';']
1. temp store ; ;
in symbol ; 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
else ; ;
matched
here we are ['identifier', '=', 'EXPRESSION', ';'] [['identifier', '=', 'EXPRESSION', ';']] 0
1.SYMBOL in RULE ASSIGN ['ASSIGN', 'ST']
1. temp store } }
in symbol ST 		(in rule  ['ASSIGN', 'ST'] )
in producer
in match rule with  ST : [['STATEMENT_ST']]
in rule  ['STATEMENT_ST']  with  }
in symbol STATEMENT_ST 		(in rule  ['STATEMENT_ST'] )
in producer
in match rule with  STATEMENT_ST : [['STATEMENT', ';', 'ST'], ['STATEMENT']]
in rule  ['STATEMENT', ';', 'ST']  with  }
in symbol STATEMENT 		(in rule  ['STATEMENT', ';', 'ST'] )
in producer
in match rule with  STATEMENT : [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['FOR_LOOP_ST']  with  }
in symbol FOR_LOOP_ST 		(in rule  ['FOR_LOOP_ST'] )
in producer
in match rule with  FOR_LOOP_ST : [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
in rule  ['FOR_LOOP', 'ST']  with  }
in symbol FOR_LOOP 		(in rule  ['FOR_LOOP', 'ST'] )
in producer
in match rule with  FOR_LOOP : [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with  }
in symbol for 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else } for
5. unmatched for }
returned false  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
2. unmatched FOR_LOOP } } ['FOR_LOOP', 'ST']
returned false  ['FOR_LOOP', 'ST'] [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
in rule  ['FOR_LOOP']  with  }
in symbol FOR_LOOP 		(in rule  ['FOR_LOOP'] )
in producer
in match rule with  FOR_LOOP : [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with  }
in symbol for 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else } for
5. unmatched for }
returned false  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
2. unmatched FOR_LOOP } } ['FOR_LOOP']
returned false  ['FOR_LOOP'] [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
2. unmatched FOR_LOOP_ST } } ['FOR_LOOP_ST']
returned false  ['FOR_LOOP_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['IF_COND_ST']  with  }
in symbol IF_COND_ST 		(in rule  ['IF_COND_ST'] )
in producer
in match rule with  IF_COND_ST : [['IF_COND', 'ST'], ['IF_COND']]
in rule  ['IF_COND', 'ST']  with  }
in symbol IF_COND 		(in rule  ['IF_COND', 'ST'] )
in producer
in match rule with  IF_COND : [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with  }
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] )
else } if
5. unmatched if }
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with  }
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] )
else } if
5. unmatched if }
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']  with  }
in symbol EXPRESSION 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  }
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  }
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  }
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  }
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  }
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F } } ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  }
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  }
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  }
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F } } ['F']
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T } } ['T', "E'"]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  }
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  }
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  }
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  }
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F } } ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  }
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  }
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  }
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F } } ['F']
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T } } ['T']
returned false  ['T'] [['T', "E'"], ['T']]
2. unmatched E } } ['E']
returned false  ['E'] [['E']]
2. unmatched EXPRESSION } } ['EXPRESSION', 'relational_operator', 'EXPRESSION']
returned false  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
2. unmatched IF_COND } } ['IF_COND', 'ST']
returned false  ['IF_COND', 'ST'] [['IF_COND', 'ST'], ['IF_COND']]
in rule  ['IF_COND']  with  }
in symbol IF_COND 		(in rule  ['IF_COND'] )
in producer
in match rule with  IF_COND : [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with  }
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] )
else } if
5. unmatched if }
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with  }
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] )
else } if
5. unmatched if }
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']  with  }
in symbol EXPRESSION 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  }
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  }
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  }
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  }
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  }
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F } } ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  }
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  }
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  }
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F } } ['F']
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T } } ['T', "E'"]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  }
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  }
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  }
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  }
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F } } ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  }
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  }
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  }
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F } } ['F']
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T } } ['T']
returned false  ['T'] [['T', "E'"], ['T']]
2. unmatched E } } ['E']
returned false  ['E'] [['E']]
2. unmatched EXPRESSION } } ['EXPRESSION', 'relational_operator', 'EXPRESSION']
returned false  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
2. unmatched IF_COND } } ['IF_COND']
returned false  ['IF_COND'] [['IF_COND', 'ST'], ['IF_COND']]
2. unmatched IF_COND_ST } } ['IF_COND_ST']
returned false  ['IF_COND_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['ASSIGN_ST']  with  }
in symbol ASSIGN_ST 		(in rule  ['ASSIGN_ST'] )
in producer
in match rule with  ASSIGN_ST : [['ASSIGN', 'ST'], ['ASSIGN']]
in rule  ['ASSIGN', 'ST']  with  }
in symbol ASSIGN 		(in rule  ['ASSIGN', 'ST'] )
in producer
in match rule with  ASSIGN : [['identifier', '=', 'EXPRESSION', ';']]
in rule  ['identifier', '=', 'EXPRESSION', ';']  with  }
in symbol identifier 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier', '=', 'EXPRESSION', ';'] [['identifier', '=', 'EXPRESSION', ';']]
2. unmatched ASSIGN } } ['ASSIGN', 'ST']
returned false  ['ASSIGN', 'ST'] [['ASSIGN', 'ST'], ['ASSIGN']]
in rule  ['ASSIGN']  with  }
in symbol ASSIGN 		(in rule  ['ASSIGN'] )
in producer
in match rule with  ASSIGN : [['identifier', '=', 'EXPRESSION', ';']]
in rule  ['identifier', '=', 'EXPRESSION', ';']  with  }
in symbol identifier 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier', '=', 'EXPRESSION', ';'] [['identifier', '=', 'EXPRESSION', ';']]
2. unmatched ASSIGN } } ['ASSIGN']
returned false  ['ASSIGN'] [['ASSIGN', 'ST'], ['ASSIGN']]
2. unmatched ASSIGN_ST } } ['ASSIGN_ST']
returned false  ['ASSIGN_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['DECL_ST']  with  }
in symbol DECL_ST 		(in rule  ['DECL_ST'] )
in producer
in match rule with  DECL_ST : [['DECL', 'ST'], ['DECL']]
in rule  ['DECL', 'ST']  with  }
in symbol DECL 		(in rule  ['DECL', 'ST'] )
in producer
in match rule with  DECL : [['type', 'identifier', ';']]
in rule  ['type', 'identifier', ';']  with  }
in symbol type 		(in rule  ['type', 'identifier', ';'] )
is token
in match token } punctuation type
4. unmatched token
returned false  ['type', 'identifier', ';'] [['type', 'identifier', ';']]
2. unmatched DECL } } ['DECL', 'ST']
returned false  ['DECL', 'ST'] [['DECL', 'ST'], ['DECL']]
in rule  ['DECL']  with  }
in symbol DECL 		(in rule  ['DECL'] )
in producer
in match rule with  DECL : [['type', 'identifier', ';']]
in rule  ['type', 'identifier', ';']  with  }
in symbol type 		(in rule  ['type', 'identifier', ';'] )
is token
in match token } punctuation type
4. unmatched token
returned false  ['type', 'identifier', ';'] [['type', 'identifier', ';']]
2. unmatched DECL } } ['DECL']
returned false  ['DECL'] [['DECL', 'ST'], ['DECL']]
2. unmatched DECL_ST } } ['DECL_ST']
returned false  ['DECL_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
2. unmatched STATEMENT } } ['STATEMENT', ';', 'ST']
returned false  ['STATEMENT', ';', 'ST'] [['STATEMENT', ';', 'ST'], ['STATEMENT']]
in rule  ['STATEMENT']  with  }
in symbol STATEMENT 		(in rule  ['STATEMENT'] )
in producer
in match rule with  STATEMENT : [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['FOR_LOOP_ST']  with  }
in symbol FOR_LOOP_ST 		(in rule  ['FOR_LOOP_ST'] )
in producer
in match rule with  FOR_LOOP_ST : [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
in rule  ['FOR_LOOP', 'ST']  with  }
in symbol FOR_LOOP 		(in rule  ['FOR_LOOP', 'ST'] )
in producer
in match rule with  FOR_LOOP : [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with  }
in symbol for 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else } for
5. unmatched for }
returned false  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
2. unmatched FOR_LOOP } } ['FOR_LOOP', 'ST']
returned false  ['FOR_LOOP', 'ST'] [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
in rule  ['FOR_LOOP']  with  }
in symbol FOR_LOOP 		(in rule  ['FOR_LOOP'] )
in producer
in match rule with  FOR_LOOP : [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']  with  }
in symbol for 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else } for
5. unmatched for }
returned false  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']]
2. unmatched FOR_LOOP } } ['FOR_LOOP']
returned false  ['FOR_LOOP'] [['FOR_LOOP', 'ST'], ['FOR_LOOP']]
2. unmatched FOR_LOOP_ST } } ['FOR_LOOP_ST']
returned false  ['FOR_LOOP_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['IF_COND_ST']  with  }
in symbol IF_COND_ST 		(in rule  ['IF_COND_ST'] )
in producer
in match rule with  IF_COND_ST : [['IF_COND', 'ST'], ['IF_COND']]
in rule  ['IF_COND', 'ST']  with  }
in symbol IF_COND 		(in rule  ['IF_COND', 'ST'] )
in producer
in match rule with  IF_COND : [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with  }
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] )
else } if
5. unmatched if }
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with  }
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] )
else } if
5. unmatched if }
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']  with  }
in symbol EXPRESSION 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  }
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  }
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  }
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  }
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  }
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F } } ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  }
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  }
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  }
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F } } ['F']
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T } } ['T', "E'"]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  }
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  }
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  }
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  }
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F } } ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  }
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  }
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  }
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F } } ['F']
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T } } ['T']
returned false  ['T'] [['T', "E'"], ['T']]
2. unmatched E } } ['E']
returned false  ['E'] [['E']]
2. unmatched EXPRESSION } } ['EXPRESSION', 'relational_operator', 'EXPRESSION']
returned false  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
2. unmatched IF_COND } } ['IF_COND', 'ST']
returned false  ['IF_COND', 'ST'] [['IF_COND', 'ST'], ['IF_COND']]
in rule  ['IF_COND']  with  }
in symbol IF_COND 		(in rule  ['IF_COND'] )
in producer
in match rule with  IF_COND : [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE']  with  }
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] )
else } if
5. unmatched if }
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}']  with  }
in symbol if 		(in rule  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] )
else } if
5. unmatched if }
returned false  ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION']  with  }
in symbol EXPRESSION 		(in rule  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  }
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  }
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  }
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  }
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  }
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F } } ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  }
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  }
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  }
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F } } ['F']
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T } } ['T', "E'"]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  }
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  }
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  }
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  }
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F } } ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  }
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  }
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G', '^', 'F']
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  }
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  }
in symbol ( 		(in rule  ['(', 'E', ')'] )
else } (
5. unmatched ( }
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  }
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  }
in symbol number 		(in rule  ['number'] )
is token
in match token } punctuation number
4. unmatched token
returned false  ['number'] [['(', 'E', ')'], ['identifier'], ['number']]
2. unmatched G } } ['G']
returned false  ['G'] [['G', '^', 'F'], ['G']]
2. unmatched F } } ['F']
returned false  ['F'] [['F', "T'"], ['F']]
2. unmatched T } } ['T']
returned false  ['T'] [['T', "E'"], ['T']]
2. unmatched E } } ['E']
returned false  ['E'] [['E']]
2. unmatched EXPRESSION } } ['EXPRESSION', 'relational_operator', 'EXPRESSION']
returned false  ['EXPRESSION', 'relational_operator', 'EXPRESSION'] [['if', '(', 'COND', ')', '{', 'STATEMENT', ';', '}', 'OP_ELSE'], ['if', '(', 'COND', ')', '{', 'STATEMENT', '}'], ['EXPRESSION', 'relational_operator', 'EXPRESSION']]
2. unmatched IF_COND } } ['IF_COND']
returned false  ['IF_COND'] [['IF_COND', 'ST'], ['IF_COND']]
2. unmatched IF_COND_ST } } ['IF_COND_ST']
returned false  ['IF_COND_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['ASSIGN_ST']  with  }
in symbol ASSIGN_ST 		(in rule  ['ASSIGN_ST'] )
in producer
in match rule with  ASSIGN_ST : [['ASSIGN', 'ST'], ['ASSIGN']]
in rule  ['ASSIGN', 'ST']  with  }
in symbol ASSIGN 		(in rule  ['ASSIGN', 'ST'] )
in producer
in match rule with  ASSIGN : [['identifier', '=', 'EXPRESSION', ';']]
in rule  ['identifier', '=', 'EXPRESSION', ';']  with  }
in symbol identifier 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier', '=', 'EXPRESSION', ';'] [['identifier', '=', 'EXPRESSION', ';']]
2. unmatched ASSIGN } } ['ASSIGN', 'ST']
returned false  ['ASSIGN', 'ST'] [['ASSIGN', 'ST'], ['ASSIGN']]
in rule  ['ASSIGN']  with  }
in symbol ASSIGN 		(in rule  ['ASSIGN'] )
in producer
in match rule with  ASSIGN : [['identifier', '=', 'EXPRESSION', ';']]
in rule  ['identifier', '=', 'EXPRESSION', ';']  with  }
in symbol identifier 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
is token
in match token } punctuation identifier
4. unmatched token
returned false  ['identifier', '=', 'EXPRESSION', ';'] [['identifier', '=', 'EXPRESSION', ';']]
2. unmatched ASSIGN } } ['ASSIGN']
returned false  ['ASSIGN'] [['ASSIGN', 'ST'], ['ASSIGN']]
2. unmatched ASSIGN_ST } } ['ASSIGN_ST']
returned false  ['ASSIGN_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
in rule  ['DECL_ST']  with  }
in symbol DECL_ST 		(in rule  ['DECL_ST'] )
in producer
in match rule with  DECL_ST : [['DECL', 'ST'], ['DECL']]
in rule  ['DECL', 'ST']  with  }
in symbol DECL 		(in rule  ['DECL', 'ST'] )
in producer
in match rule with  DECL : [['type', 'identifier', ';']]
in rule  ['type', 'identifier', ';']  with  }
in symbol type 		(in rule  ['type', 'identifier', ';'] )
is token
in match token } punctuation type
4. unmatched token
returned false  ['type', 'identifier', ';'] [['type', 'identifier', ';']]
2. unmatched DECL } } ['DECL', 'ST']
returned false  ['DECL', 'ST'] [['DECL', 'ST'], ['DECL']]
in rule  ['DECL']  with  }
in symbol DECL 		(in rule  ['DECL'] )
in producer
in match rule with  DECL : [['type', 'identifier', ';']]
in rule  ['type', 'identifier', ';']  with  }
in symbol type 		(in rule  ['type', 'identifier', ';'] )
is token
in match token } punctuation type
4. unmatched token
returned false  ['type', 'identifier', ';'] [['type', 'identifier', ';']]
2. unmatched DECL } } ['DECL']
returned false  ['DECL'] [['DECL', 'ST'], ['DECL']]
2. unmatched DECL_ST } } ['DECL_ST']
returned false  ['DECL_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']]
2. unmatched STATEMENT } } ['STATEMENT']
returned false  ['STATEMENT'] [['STATEMENT', ';', 'ST'], ['STATEMENT']]
2. unmatched STATEMENT_ST } } ['STATEMENT_ST']
returned false  ['STATEMENT_ST'] [['STATEMENT_ST']]
2. unmatched ST } } ['ASSIGN', 'ST']
returned false  ['ASSIGN', 'ST'] [['ASSIGN', 'ST'], ['ASSIGN']]
in rule  ['ASSIGN']  with  l
in symbol ASSIGN 		(in rule  ['ASSIGN'] )
in producer
in match rule with  ASSIGN : [['identifier', '=', 'EXPRESSION', ';']]
in rule  ['identifier', '=', 'EXPRESSION', ';']  with  l
in symbol identifier 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
is token
in match token l identifier identifier
matched
2. temp store = =
in symbol = 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
else = =
matched
in symbol EXPRESSION 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
in producer
in match rule with  EXPRESSION : [['E']]
in rule  ['E']  with  5
in symbol E 		(in rule  ['E'] )
in producer
in match rule with  E : [['T', "E'"], ['T']]
in rule  ['T', "E'"]  with  5
in symbol T 		(in rule  ['T', "E'"] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  5
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  5
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ; ;
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ; ^
5. unmatched ^ ;
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  5
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 5 ;
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store ; ;
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  ;
in symbol * 		(in rule  ['*', 'F', "T'"] )
else ; *
5. unmatched * ;
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  ;
in symbol / 		(in rule  ['/', 'F', "T'"] )
else ; /
5. unmatched / ;
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' ; ; ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  5
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  5
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ; ;
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ; ^
5. unmatched ^ ;
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  5
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 5 ;
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store 5 ;
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T', "E'"]
1. temp store ; ;
in symbol E' 		(in rule  ['T', "E'"] )
in producer
in match rule with  E' : [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['+', 'T', "E'"]  with  ;
in symbol + 		(in rule  ['+', 'T', "E'"] )
else ; +
5. unmatched + ;
returned false  ['+', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
in rule  ['-', 'T', "E'"]  with  ;
in symbol - 		(in rule  ['-', 'T', "E'"] )
else ; -
5. unmatched - ;
returned false  ['-', 'T', "E'"] [['+', 'T', "E'"], ['-', 'T', "E'"]]
2. unmatched E' ; ; ['T', "E'"]
returned false  ['T', "E'"] [['T', "E'"], ['T']]
in rule  ['T']  with  5
in symbol T 		(in rule  ['T'] )
in producer
in match rule with  T : [['F', "T'"], ['F']]
in rule  ['F', "T'"]  with  5
in symbol F 		(in rule  ['F', "T'"] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  5
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ; ;
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ; ^
5. unmatched ^ ;
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  5
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 5 ;
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F', "T'"]
1. temp store ; ;
in symbol T' 		(in rule  ['F', "T'"] )
in producer
in match rule with  T' : [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['*', 'F', "T'"]  with  ;
in symbol * 		(in rule  ['*', 'F', "T'"] )
else ; *
5. unmatched * ;
returned false  ['*', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
in rule  ['/', 'F', "T'"]  with  ;
in symbol / 		(in rule  ['/', 'F', "T'"] )
else ; /
5. unmatched / ;
returned false  ['/', 'F', "T'"] [['*', 'F', "T'"], ['/', 'F', "T'"]]
2. unmatched T' ; ; ['F', "T'"]
returned false  ['F', "T'"] [['F', "T'"], ['F']]
in rule  ['F']  with  5
in symbol F 		(in rule  ['F'] )
in producer
in match rule with  F : [['G', '^', 'F'], ['G']]
in rule  ['G', '^', 'F']  with  5
in symbol G 		(in rule  ['G', '^', 'F'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G', '^', 'F']
1. temp store ; ;
in symbol ^ 		(in rule  ['G', '^', 'F'] )
else ; ^
5. unmatched ^ ;
returned false  ['G', '^', 'F'] [['G', '^', 'F'], ['G']]
in rule  ['G']  with  5
in symbol G 		(in rule  ['G'] )
in producer
in match rule with  G : [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['(', 'E', ')']  with  5
in symbol ( 		(in rule  ['(', 'E', ')'] )
else 5 (
5. unmatched ( 5
returned false  ['(', 'E', ')'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['identifier']  with  5
in symbol identifier 		(in rule  ['identifier'] )
is token
in match token 5 number identifier
4. unmatched token
returned false  ['identifier'] [['(', 'E', ')'], ['identifier'], ['number']]
in rule  ['number']  with  5
in symbol number 		(in rule  ['number'] )
is token
in match token 5 number number
matched
2. temp store 5 ;
here we are ['number'] [['(', 'E', ')'], ['identifier'], ['number']] 2
1.SYMBOL in RULE G ['G']
1. temp store 5 ;
here we are ['G'] [['G', '^', 'F'], ['G']] 1
1.SYMBOL in RULE F ['F']
1. temp store 5 ;
here we are ['F'] [['F', "T'"], ['F']] 1
1.SYMBOL in RULE T ['T']
1. temp store 5 ;
here we are ['T'] [['T', "E'"], ['T']] 1
1.SYMBOL in RULE E ['E']
1. temp store 5 ;
here we are ['E'] [['E']] 0
1.SYMBOL in RULE EXPRESSION ['identifier', '=', 'EXPRESSION', ';']
1. temp store ; ;
in symbol ; 		(in rule  ['identifier', '=', 'EXPRESSION', ';'] )
else ; ;
matched
here we are ['identifier', '=', 'EXPRESSION', ';'] [['identifier', '=', 'EXPRESSION', ';']] 0
1.SYMBOL in RULE ASSIGN ['ASSIGN']
1. temp store l }
here we are ['ASSIGN'] [['ASSIGN', 'ST'], ['ASSIGN']] 1
1.SYMBOL in RULE ASSIGN_ST ['ASSIGN_ST']
1. temp store l }
here we are ['ASSIGN_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']] 2
1.SYMBOL in RULE STATEMENT ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']
1. temp store } }
in symbol } 		(in rule  ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] )
else } }
matched
here we are ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'] [['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}']] 0
1.SYMBOL in RULE FOR_LOOP ['FOR_LOOP']
1. temp store for eof
here we are ['FOR_LOOP'] [['FOR_LOOP', 'ST'], ['FOR_LOOP']] 1
1.SYMBOL in RULE FOR_LOOP_ST ['FOR_LOOP_ST']
1. temp store for eof
here we are ['FOR_LOOP_ST'] [['FOR_LOOP_ST'], ['IF_COND_ST'], ['ASSIGN_ST'], ['DECL_ST']] 0
1.SYMBOL in RULE STATEMENT ['STATEMENT', 'eof']
1. temp store for eof
in symbol eof 		(in rule  ['STATEMENT', 'eof'] )
else for eof
5. unmatched eof for
returned false  ['STATEMENT', 'eof'] [['STATEMENT', 'eof']]
ERROR for eof
STACK ----
['PROG', ['number'], ['number'], ['G'], ['number'], ['number'], ['G'], ['F'], ['number'], ['number'], ['G'], ['number'], ['number'], ['G'], ['F'], ['T'], ['E'], ['identifier', '=', 'EXPRESSION', ';'], ['identifier'], ['identifier'], ['G'], ['identifier'], ['identifier'], ['G'], ['F'], ['identifier'], ['identifier'], ['G'], ['identifier'], ['identifier'], ['G'], ['F'], ['T'], ['E'], ['number'], ['number'], ['G'], ['number'], ['number'], ['G'], ['F'], ['number'], ['number'], ['G'], ['number'], ['number'], ['G'], ['F'], ['T'], ['E'], ['EXPRESSION', 'relational_operator', 'EXPRESSION', ';'], ['number'], ['number'], ['G'], ['number'], ['number'], ['G'], ['F'], ['number'], ['number'], ['G'], ['number'], ['number'], ['G'], ['F'], ['T'], ['E'], ['identifier', '=', 'EXPRESSION'], ['I_ASSIGN'], ['identifier'], ['identifier'], ['G'], ['identifier'], ['identifier'], ['G'], ['F'], ['identifier'], ['identifier'], ['G'], ['identifier'], ['identifier'], ['G'], ['F'], ['T'], ['E'], ['identifier'], ['identifier'], ['G'], ['identifier'], ['identifier'], ['G'], ['F'], ['identifier'], ['identifier'], ['G'], ['identifier'], ['identifier'], ['G'], ['F'], ['T'], ['E'], ['number'], ['number'], ['G'], ['number'], ['number'], ['G'], ['F'], ['number'], ['number'], ['G'], ['number'], ['number'], ['G'], ['F'], ['T'], ['E'], ['identifier', '=', 'EXPRESSION', ';'], ['number'], ['number'], ['G'], ['number'], ['number'], ['G'], ['F'], ['number'], ['number'], ['G'], ['number'], ['number'], ['G'], ['F'], ['T'], ['E'], ['identifier', '=', 'EXPRESSION', ';'], ['ASSIGN'], ['ASSIGN_ST'], ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'], ['number'], ['number'], ['G'], ['number'], ['number'], ['G'], ['F'], ['number'], ['number'], ['G'], ['number'], ['number'], ['G'], ['F'], ['T'], ['E'], ['identifier', '=', 'EXPRESSION', ';'], ['identifier'], ['identifier'], ['G'], ['identifier'], ['identifier'], ['G'], ['F'], ['identifier'], ['identifier'], ['G'], ['identifier'], ['identifier'], ['G'], ['F'], ['T'], ['E'], ['number'], ['number'], ['G'], ['number'], ['number'], ['G'], ['F'], ['number'], ['number'], ['G'], ['number'], ['number'], ['G'], ['F'], ['T'], ['E'], ['EXPRESSION', 'relational_operator', 'EXPRESSION', ';'], ['number'], ['number'], ['G'], ['number'], ['number'], ['G'], ['F'], ['number'], ['number'], ['G'], ['number'], ['number'], ['G'], ['F'], ['T'], ['E'], ['identifier', '=', 'EXPRESSION'], ['I_ASSIGN'], ['identifier'], ['identifier'], ['G'], ['identifier'], ['identifier'], ['G'], ['F'], ['identifier'], ['identifier'], ['G'], ['identifier'], ['identifier'], ['G'], ['F'], ['T'], ['E'], ['identifier'], ['identifier'], ['G'], ['identifier'], ['identifier'], ['G'], ['F'], ['identifier'], ['identifier'], ['G'], ['identifier'], ['identifier'], ['G'], ['F'], ['T'], ['E'], ['number'], ['number'], ['G'], ['number'], ['number'], ['G'], ['F'], ['number'], ['number'], ['G'], ['number'], ['number'], ['G'], ['F'], ['T'], ['E'], ['identifier', '=', 'EXPRESSION', ';'], ['number'], ['number'], ['G'], ['number'], ['number'], ['G'], ['F'], ['number'], ['number'], ['G'], ['number'], ['number'], ['G'], ['F'], ['T'], ['E'], ['identifier', '=', 'EXPRESSION', ';'], ['ASSIGN'], ['ASSIGN_ST'], ['for', '(', 'ASSIGN', 'COND', 'INCREMENT', ')', '{', 'STATEMENT', '}'], ['FOR_LOOP'], ['FOR_LOOP_ST']]
